%main = fn(%serving_default_input_1:0: f32[?,128,128,1]): // (f32[?,128,128,1]) -> f32[?,?,?,1]
{
  %0 = Transpose(%serving_default_input_1:0, const(i32[4] : {0,3,1,2})): // f32[?,1,128,128]
  %1 = ShapeOf(%0): // i64[4]
  %2 = GetPaddings(%1, const(i64[4] : {16L,1L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %3 = Conv2D(PadMode.Constant, %0, const(f32[16,1,3,3]), const(f32[16]), const(i32[2] : {1,1}), %2, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,16,?,?]
  %4 = Transpose(%3, const(i32[4] : {0,2,3,1})): // f32[?,?,?,16]
  %5 = LeakyRelu(%4, const(f32 : 0.3)): // f32[?,?,?,16]
  %6 = Transpose(%5, const(i32[4] : {0,3,1,2})): // f32[?,16,?,?]
  %7 = ShapeOf(%6): // i64[4]
  %8 = GetPaddings(%7, const(i64[4] : {16L,16L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %9 = Conv2D(PadMode.Constant, %6, const(f32[16,16,3,3]), const(f32[16]), const(i32[2] : {1,1}), %8, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,16,?,?]
  %10 = Transpose(%9, const(i32[4] : {0,2,3,1})): // f32[?,?,?,16]
  %11 = LeakyRelu(%10, const(f32 : 0.3)): // f32[?,?,?,16]
  %12 = Transpose(%11, const(i32[4] : {0,3,1,2})): // f32[?,16,?,?]
  %13 = ShapeOf(%12): // i64[4]
  %14 = Slice(%13, const(i32[1] : {2}), const(i32[1] : {3}), const(i32[1] : {0}), const(i32[1] : {1})): // i64[1]
  %15 = Squeeze(%14, const(i64[1] : {0L})): // i64
  %16 = Cast(DataTypes.Int32, CastMode.KDefault, %15): // i32
  %17 = Sub(BinaryOp.Sub, %16, const(i32 : 2)): // i32
  %18 = Add(BinaryOp.Add, %17, const(i32 : 2)): // i32
  %19 = Div(BinaryOp.Div, %18, const(i32 : 2)): // i32
  %20 = Sub(BinaryOp.Sub, %19, const(i32 : 1)): // i32
  %21 = Mul(BinaryOp.Mul, %20, const(i32 : 2)): // i32
  %22 = Add(BinaryOp.Add, %21, const(i32 : 2)): // i32
  %23 = Sub(BinaryOp.Sub, %22, %16): // i32
  %24 = Max(BinaryOp.Max, const(i32 : 0), %23): // i32
  %25 = Div(BinaryOp.Div, %24, const(i32 : 2)): // i32
  %26 = Cast(DataTypes.Int32, CastMode.KDefault, %25): // i32
  %27 = Div(BinaryOp.Div, %24, const(i32 : 2)): // i32
  %28 = Sub(BinaryOp.Sub, %24, %27): // i32
  %29 = Cast(DataTypes.Int32, CastMode.KDefault, %28): // i32
  %30 = (%26, %29): // (i32, i32)
  
  %31 = Stack(%30, const(i32 : 0)): // i32[2]
  %32 = ShapeOf(%12): // i64[4]
  %33 = Slice(%32, const(i32[1] : {3}), const(i32[1] : {4}), const(i32[1] : {0}), const(i32[1] : {1})): // i64[1]
  %34 = Squeeze(%33, const(i64[1] : {0L})): // i64
  %35 = Cast(DataTypes.Int32, CastMode.KDefault, %34): // i32
  %36 = Sub(BinaryOp.Sub, %35, const(i32 : 2)): // i32
  %37 = Add(BinaryOp.Add, %36, const(i32 : 2)): // i32
  %38 = Div(BinaryOp.Div, %37, const(i32 : 2)): // i32
  %39 = Sub(BinaryOp.Sub, %38, const(i32 : 1)): // i32
  %40 = Mul(BinaryOp.Mul, %39, const(i32 : 2)): // i32
  %41 = Add(BinaryOp.Add, %40, const(i32 : 2)): // i32
  %42 = Sub(BinaryOp.Sub, %41, %35): // i32
  %43 = Max(BinaryOp.Max, const(i32 : 0), %42): // i32
  %44 = Div(BinaryOp.Div, %43, const(i32 : 2)): // i32
  %45 = Cast(DataTypes.Int32, CastMode.KDefault, %44): // i32
  %46 = Div(BinaryOp.Div, %43, const(i32 : 2)): // i32
  %47 = Sub(BinaryOp.Sub, %43, %46): // i32
  %48 = Cast(DataTypes.Int32, CastMode.KDefault, %47): // i32
  %49 = (%45, %48): // (i32, i32)
  
  %50 = Stack(%49, const(i32 : 0)): // i32[2]
  %51 = (%31, %50): // (i32[2], i32[2])
  
  %52 = Stack(%51, const(i32 : 0)): // i32[2,2]
  %53 = ReduceWindow2D(ReduceOp.Max, %12, const(f32 : -3.4028235E+38), const(i32[2] : {2,2}), const(i32[2] : {2,2}), %52, const(i64[2] : {1L,1L}), const(bool : False), const(bool : False)): // f32[?,?,?,?]
  %54 = Transpose(%53, const(i32[4] : {0,2,3,1})): // f32[?,?,?,?]
  %55 = Transpose(%54, const(i32[4] : {0,3,1,2})): // f32[?,?,?,?]
  %56 = ShapeOf(%55): // i64[4]
  %57 = GetPaddings(%56, const(i64[4] : {32L,16L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %58 = Conv2D(PadMode.Constant, %55, const(f32[32,16,3,3]), const(f32[32]), const(i32[2] : {1,1}), %57, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,32,?,?]
  %59 = Transpose(%58, const(i32[4] : {0,2,3,1})): // f32[?,?,?,32]
  %60 = LeakyRelu(%59, const(f32 : 0.3)): // f32[?,?,?,32]
  %61 = Transpose(%60, const(i32[4] : {0,3,1,2})): // f32[?,32,?,?]
  %62 = ShapeOf(%61): // i64[4]
  %63 = GetPaddings(%62, const(i64[4] : {32L,32L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %64 = Conv2D(PadMode.Constant, %61, const(f32[32,32,3,3]), const(f32[32]), const(i32[2] : {1,1}), %63, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,32,?,?]
  %65 = Transpose(%64, const(i32[4] : {0,2,3,1})): // f32[?,?,?,32]
  %66 = LeakyRelu(%65, const(f32 : 0.3)): // f32[?,?,?,32]
  %67 = Transpose(%66, const(i32[4] : {0,3,1,2})): // f32[?,32,?,?]
  %68 = ShapeOf(%67): // i64[4]
  %69 = Slice(%68, const(i32[1] : {2}), const(i32[1] : {3}), const(i32[1] : {0}), const(i32[1] : {1})): // i64[1]
  %70 = Squeeze(%69, const(i64[1] : {0L})): // i64
  %71 = Cast(DataTypes.Int32, CastMode.KDefault, %70): // i32
  %72 = Sub(BinaryOp.Sub, %71, const(i32 : 2)): // i32
  %73 = Add(BinaryOp.Add, %72, const(i32 : 2)): // i32
  %74 = Div(BinaryOp.Div, %73, const(i32 : 2)): // i32
  %75 = Sub(BinaryOp.Sub, %74, const(i32 : 1)): // i32
  %76 = Mul(BinaryOp.Mul, %75, const(i32 : 2)): // i32
  %77 = Add(BinaryOp.Add, %76, const(i32 : 2)): // i32
  %78 = Sub(BinaryOp.Sub, %77, %71): // i32
  %79 = Max(BinaryOp.Max, const(i32 : 0), %78): // i32
  %80 = Div(BinaryOp.Div, %79, const(i32 : 2)): // i32
  %81 = Cast(DataTypes.Int32, CastMode.KDefault, %80): // i32
  %82 = Div(BinaryOp.Div, %79, const(i32 : 2)): // i32
  %83 = Sub(BinaryOp.Sub, %79, %82): // i32
  %84 = Cast(DataTypes.Int32, CastMode.KDefault, %83): // i32
  %85 = (%81, %84): // (i32, i32)
  
  %86 = Stack(%85, const(i32 : 0)): // i32[2]
  %87 = ShapeOf(%67): // i64[4]
  %88 = Slice(%87, const(i32[1] : {3}), const(i32[1] : {4}), const(i32[1] : {0}), const(i32[1] : {1})): // i64[1]
  %89 = Squeeze(%88, const(i64[1] : {0L})): // i64
  %90 = Cast(DataTypes.Int32, CastMode.KDefault, %89): // i32
  %91 = Sub(BinaryOp.Sub, %90, const(i32 : 2)): // i32
  %92 = Add(BinaryOp.Add, %91, const(i32 : 2)): // i32
  %93 = Div(BinaryOp.Div, %92, const(i32 : 2)): // i32
  %94 = Sub(BinaryOp.Sub, %93, const(i32 : 1)): // i32
  %95 = Mul(BinaryOp.Mul, %94, const(i32 : 2)): // i32
  %96 = Add(BinaryOp.Add, %95, const(i32 : 2)): // i32
  %97 = Sub(BinaryOp.Sub, %96, %90): // i32
  %98 = Max(BinaryOp.Max, const(i32 : 0), %97): // i32
  %99 = Div(BinaryOp.Div, %98, const(i32 : 2)): // i32
  %100 = Cast(DataTypes.Int32, CastMode.KDefault, %99): // i32
  %101 = Div(BinaryOp.Div, %98, const(i32 : 2)): // i32
  %102 = Sub(BinaryOp.Sub, %98, %101): // i32
  %103 = Cast(DataTypes.Int32, CastMode.KDefault, %102): // i32
  %104 = (%100, %103): // (i32, i32)
  
  %105 = Stack(%104, const(i32 : 0)): // i32[2]
  %106 = (%86, %105): // (i32[2], i32[2])
  
  %107 = Stack(%106, const(i32 : 0)): // i32[2,2]
  %108 = ReduceWindow2D(ReduceOp.Max, %67, const(f32 : -3.4028235E+38), const(i32[2] : {2,2}), const(i32[2] : {2,2}), %107, const(i64[2] : {1L,1L}), const(bool : False), const(bool : False)): // f32[?,?,?,?]
  %109 = Transpose(%108, const(i32[4] : {0,2,3,1})): // f32[?,?,?,?]
  %110 = Transpose(%109, const(i32[4] : {0,3,1,2})): // f32[?,?,?,?]
  %111 = ShapeOf(%110): // i64[4]
  %112 = GetPaddings(%111, const(i64[4] : {64L,32L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %113 = Conv2D(PadMode.Constant, %110, const(f32[64,32,3,3]), const(f32[64]), const(i32[2] : {1,1}), %112, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,64,?,?]
  %114 = Transpose(%113, const(i32[4] : {0,2,3,1})): // f32[?,?,?,64]
  %115 = LeakyRelu(%114, const(f32 : 0.3)): // f32[?,?,?,64]
  %116 = Transpose(%115, const(i32[4] : {0,3,1,2})): // f32[?,64,?,?]
  %117 = ShapeOf(%116): // i64[4]
  %118 = GetPaddings(%117, const(i64[4] : {64L,64L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %119 = Conv2D(PadMode.Constant, %116, const(f32[64,64,3,3]), const(f32[64]), const(i32[2] : {1,1}), %118, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,64,?,?]
  %120 = Transpose(%119, const(i32[4] : {0,2,3,1})): // f32[?,?,?,64]
  %121 = LeakyRelu(%120, const(f32 : 0.3)): // f32[?,?,?,64]
  %122 = Transpose(%121, const(i32[4] : {0,3,1,2})): // f32[?,64,?,?]
  %123 = ShapeOf(%122): // i64[4]
  %124 = Slice(%123, const(i32[1] : {2}), const(i32[1] : {3}), const(i32[1] : {0}), const(i32[1] : {1})): // i64[1]
  %125 = Squeeze(%124, const(i64[1] : {0L})): // i64
  %126 = Cast(DataTypes.Int32, CastMode.KDefault, %125): // i32
  %127 = Sub(BinaryOp.Sub, %126, const(i32 : 2)): // i32
  %128 = Add(BinaryOp.Add, %127, const(i32 : 2)): // i32
  %129 = Div(BinaryOp.Div, %128, const(i32 : 2)): // i32
  %130 = Sub(BinaryOp.Sub, %129, const(i32 : 1)): // i32
  %131 = Mul(BinaryOp.Mul, %130, const(i32 : 2)): // i32
  %132 = Add(BinaryOp.Add, %131, const(i32 : 2)): // i32
  %133 = Sub(BinaryOp.Sub, %132, %126): // i32
  %134 = Max(BinaryOp.Max, const(i32 : 0), %133): // i32
  %135 = Div(BinaryOp.Div, %134, const(i32 : 2)): // i32
  %136 = Cast(DataTypes.Int32, CastMode.KDefault, %135): // i32
  %137 = Div(BinaryOp.Div, %134, const(i32 : 2)): // i32
  %138 = Sub(BinaryOp.Sub, %134, %137): // i32
  %139 = Cast(DataTypes.Int32, CastMode.KDefault, %138): // i32
  %140 = (%136, %139): // (i32, i32)
  
  %141 = Stack(%140, const(i32 : 0)): // i32[2]
  %142 = ShapeOf(%122): // i64[4]
  %143 = Slice(%142, const(i32[1] : {3}), const(i32[1] : {4}), const(i32[1] : {0}), const(i32[1] : {1})): // i64[1]
  %144 = Squeeze(%143, const(i64[1] : {0L})): // i64
  %145 = Cast(DataTypes.Int32, CastMode.KDefault, %144): // i32
  %146 = Sub(BinaryOp.Sub, %145, const(i32 : 2)): // i32
  %147 = Add(BinaryOp.Add, %146, const(i32 : 2)): // i32
  %148 = Div(BinaryOp.Div, %147, const(i32 : 2)): // i32
  %149 = Sub(BinaryOp.Sub, %148, const(i32 : 1)): // i32
  %150 = Mul(BinaryOp.Mul, %149, const(i32 : 2)): // i32
  %151 = Add(BinaryOp.Add, %150, const(i32 : 2)): // i32
  %152 = Sub(BinaryOp.Sub, %151, %145): // i32
  %153 = Max(BinaryOp.Max, const(i32 : 0), %152): // i32
  %154 = Div(BinaryOp.Div, %153, const(i32 : 2)): // i32
  %155 = Cast(DataTypes.Int32, CastMode.KDefault, %154): // i32
  %156 = Div(BinaryOp.Div, %153, const(i32 : 2)): // i32
  %157 = Sub(BinaryOp.Sub, %153, %156): // i32
  %158 = Cast(DataTypes.Int32, CastMode.KDefault, %157): // i32
  %159 = (%155, %158): // (i32, i32)
  
  %160 = Stack(%159, const(i32 : 0)): // i32[2]
  %161 = (%141, %160): // (i32[2], i32[2])
  
  %162 = Stack(%161, const(i32 : 0)): // i32[2,2]
  %163 = ReduceWindow2D(ReduceOp.Max, %122, const(f32 : -3.4028235E+38), const(i32[2] : {2,2}), const(i32[2] : {2,2}), %162, const(i64[2] : {1L,1L}), const(bool : False), const(bool : False)): // f32[?,?,?,?]
  %164 = Transpose(%163, const(i32[4] : {0,2,3,1})): // f32[?,?,?,?]
  %165 = Transpose(%164, const(i32[4] : {0,3,1,2})): // f32[?,?,?,?]
  %166 = ShapeOf(%165): // i64[4]
  %167 = GetPaddings(%166, const(i64[4] : {128L,64L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %168 = Conv2D(PadMode.Constant, %165, const(f32[128,64,3,3]), const(f32[128]), const(i32[2] : {1,1}), %167, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,128,?,?]
  %169 = Transpose(%168, const(i32[4] : {0,2,3,1})): // f32[?,?,?,128]
  %170 = LeakyRelu(%169, const(f32 : 0.3)): // f32[?,?,?,128]
  %171 = Transpose(%170, const(i32[4] : {0,3,1,2})): // f32[?,128,?,?]
  %172 = ShapeOf(%171): // i64[4]
  %173 = GetPaddings(%172, const(i64[4] : {128L,128L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %174 = Conv2D(PadMode.Constant, %171, const(f32[128,128,3,3]), const(f32[128]), const(i32[2] : {1,1}), %173, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,128,?,?]
  %175 = Transpose(%174, const(i32[4] : {0,2,3,1})): // f32[?,?,?,128]
  %176 = LeakyRelu(%175, const(f32 : 0.3)): // f32[?,?,?,128]
  %177 = Transpose(%176, const(i32[4] : {0,3,1,2})): // f32[?,128,?,?]
  %178 = ShapeOf(%177): // i64[4]
  %179 = Slice(%178, const(i32[1] : {2}), const(i32[1] : {3}), const(i32[1] : {0}), const(i32[1] : {1})): // i64[1]
  %180 = Squeeze(%179, const(i64[1] : {0L})): // i64
  %181 = Cast(DataTypes.Int32, CastMode.KDefault, %180): // i32
  %182 = Sub(BinaryOp.Sub, %181, const(i32 : 2)): // i32
  %183 = Add(BinaryOp.Add, %182, const(i32 : 2)): // i32
  %184 = Div(BinaryOp.Div, %183, const(i32 : 2)): // i32
  %185 = Sub(BinaryOp.Sub, %184, const(i32 : 1)): // i32
  %186 = Mul(BinaryOp.Mul, %185, const(i32 : 2)): // i32
  %187 = Add(BinaryOp.Add, %186, const(i32 : 2)): // i32
  %188 = Sub(BinaryOp.Sub, %187, %181): // i32
  %189 = Max(BinaryOp.Max, const(i32 : 0), %188): // i32
  %190 = Div(BinaryOp.Div, %189, const(i32 : 2)): // i32
  %191 = Cast(DataTypes.Int32, CastMode.KDefault, %190): // i32
  %192 = Div(BinaryOp.Div, %189, const(i32 : 2)): // i32
  %193 = Sub(BinaryOp.Sub, %189, %192): // i32
  %194 = Cast(DataTypes.Int32, CastMode.KDefault, %193): // i32
  %195 = (%191, %194): // (i32, i32)
  
  %196 = Stack(%195, const(i32 : 0)): // i32[2]
  %197 = ShapeOf(%177): // i64[4]
  %198 = Slice(%197, const(i32[1] : {3}), const(i32[1] : {4}), const(i32[1] : {0}), const(i32[1] : {1})): // i64[1]
  %199 = Squeeze(%198, const(i64[1] : {0L})): // i64
  %200 = Cast(DataTypes.Int32, CastMode.KDefault, %199): // i32
  %201 = Sub(BinaryOp.Sub, %200, const(i32 : 2)): // i32
  %202 = Add(BinaryOp.Add, %201, const(i32 : 2)): // i32
  %203 = Div(BinaryOp.Div, %202, const(i32 : 2)): // i32
  %204 = Sub(BinaryOp.Sub, %203, const(i32 : 1)): // i32
  %205 = Mul(BinaryOp.Mul, %204, const(i32 : 2)): // i32
  %206 = Add(BinaryOp.Add, %205, const(i32 : 2)): // i32
  %207 = Sub(BinaryOp.Sub, %206, %200): // i32
  %208 = Max(BinaryOp.Max, const(i32 : 0), %207): // i32
  %209 = Div(BinaryOp.Div, %208, const(i32 : 2)): // i32
  %210 = Cast(DataTypes.Int32, CastMode.KDefault, %209): // i32
  %211 = Div(BinaryOp.Div, %208, const(i32 : 2)): // i32
  %212 = Sub(BinaryOp.Sub, %208, %211): // i32
  %213 = Cast(DataTypes.Int32, CastMode.KDefault, %212): // i32
  %214 = (%210, %213): // (i32, i32)
  
  %215 = Stack(%214, const(i32 : 0)): // i32[2]
  %216 = (%196, %215): // (i32[2], i32[2])
  
  %217 = Stack(%216, const(i32 : 0)): // i32[2,2]
  %218 = ReduceWindow2D(ReduceOp.Max, %177, const(f32 : -3.4028235E+38), const(i32[2] : {2,2}), const(i32[2] : {2,2}), %217, const(i64[2] : {1L,1L}), const(bool : False), const(bool : False)): // f32[?,?,?,?]
  %219 = Transpose(%218, const(i32[4] : {0,2,3,1})): // f32[?,?,?,?]
  %220 = Transpose(%219, const(i32[4] : {0,3,1,2})): // f32[?,?,?,?]
  %221 = ShapeOf(%220): // i64[4]
  %222 = GetPaddings(%221, const(i64[4] : {256L,128L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %223 = Conv2D(PadMode.Constant, %220, const(f32[256,128,3,3]), const(f32[256]), const(i32[2] : {1,1}), %222, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,256,?,?]
  %224 = Transpose(%223, const(i32[4] : {0,2,3,1})): // f32[?,?,?,256]
  %225 = LeakyRelu(%224, const(f32 : 0.3)): // f32[?,?,?,256]
  %226 = Transpose(%225, const(i32[4] : {0,3,1,2})): // f32[?,256,?,?]
  %227 = ShapeOf(%226): // i64[4]
  %228 = GetPaddings(%227, const(i64[4] : {256L,256L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %229 = Conv2D(PadMode.Constant, %226, const(f32[256,256,3,3]), const(f32[256]), const(i32[2] : {1,1}), %228, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,256,?,?]
  %230 = Transpose(%229, const(i32[4] : {0,2,3,1})): // f32[?,?,?,256]
  %231 = LeakyRelu(%230, const(f32 : 0.3)): // f32[?,?,?,256]
  %232 = Transpose(%231, const(i32[4] : {0,3,1,2})): // f32[?,256,?,?]
  %233 = ShapeOf(%232): // i64[4]
  %234 = Slice(%233, const(i32[1] : {0}), const(i32[1] : {1}), const(i32[1] : {0}), const(i32[1] : {1})): // i64[1]
  %235 = Squeeze(%234, const(i64[1] : {0L})): // i64
  %236 = ShapeOf(%232): // i64[4]
  %237 = Slice(%236, const(i32[1] : {1}), const(i32[1] : {2}), const(i32[1] : {0}), const(i32[1] : {1})): // i64[1]
  %238 = Squeeze(%237, const(i64[1] : {0L})): // i64
  %239 = (%235, %238): // (i64, i64)
  
  %240 = Stack(%239, const(i32 : 0)): // i64[2]
  %241 = (%240, const(i64[2] : {16L,16L})): // (i64[2], i64[2])
  
  %242 = Concat(%241, const(i32 : 0)): // i64[4]
  %243 = Cast(DataTypes.Int64, CastMode.KDefault, %242): // i64[4]
  %244 = ResizeImage(ImageResizeMode.NearestNeighbor, ImageResizeTransformationMode.HalfPixel, ImageResizeNearestMode.RoundPreferCeil, True, %232, const(f32[0]), %243, const(f32 : -0.75), const(bool : False), const(f32 : -0)): // f32[?,256,?,?]
  %245 = Transpose(%244, const(i32[4] : {0,2,3,1})): // f32[?,?,?,256]
  %246 = Transpose(%245, const(i32[4] : {0,3,1,2})): // f32[?,256,?,?]
  %247 = ShapeOf(%246): // i64[4]
  %248 = GetPaddings(%247, const(i64[4] : {128L,256L,2L,2L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %249 = Conv2D(PadMode.Constant, %246, const(f32[128,256,2,2]), const(f32[128]), const(i32[2] : {1,1}), %248, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,128,?,?]
  %250 = Transpose(%249, const(i32[4] : {0,2,3,1})): // f32[?,?,?,128]
  %251 = LeakyRelu(%250, const(f32 : 0.3)): // f32[?,?,?,128]
  %252 = (%176, %251): // (f32[?,?,?,128], f32[?,?,?,128])
  
  %253 = Concat(%252, const(i32 : 3)): // f32[?,?,?,256]
  %254 = Transpose(%253, const(i32[4] : {0,3,1,2})): // f32[?,256,?,?]
  %255 = ShapeOf(%254): // i64[4]
  %256 = GetPaddings(%255, const(i64[4] : {128L,256L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %257 = Conv2D(PadMode.Constant, %254, const(f32[128,256,3,3]), const(f32[128]), const(i32[2] : {1,1}), %256, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,128,?,?]
  %258 = Transpose(%257, const(i32[4] : {0,2,3,1})): // f32[?,?,?,128]
  %259 = LeakyRelu(%258, const(f32 : 0.3)): // f32[?,?,?,128]
  %260 = Transpose(%259, const(i32[4] : {0,3,1,2})): // f32[?,128,?,?]
  %261 = ShapeOf(%260): // i64[4]
  %262 = GetPaddings(%261, const(i64[4] : {128L,128L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %263 = Conv2D(PadMode.Constant, %260, const(f32[128,128,3,3]), const(f32[128]), const(i32[2] : {1,1}), %262, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,128,?,?]
  %264 = Transpose(%263, const(i32[4] : {0,2,3,1})): // f32[?,?,?,128]
  %265 = LeakyRelu(%264, const(f32 : 0.3)): // f32[?,?,?,128]
  %266 = Transpose(%265, const(i32[4] : {0,3,1,2})): // f32[?,128,?,?]
  %267 = ShapeOf(%266): // i64[4]
  %268 = Slice(%267, const(i32[1] : {0}), const(i32[1] : {1}), const(i32[1] : {0}), const(i32[1] : {1})): // i64[1]
  %269 = Squeeze(%268, const(i64[1] : {0L})): // i64
  %270 = ShapeOf(%266): // i64[4]
  %271 = Slice(%270, const(i32[1] : {1}), const(i32[1] : {2}), const(i32[1] : {0}), const(i32[1] : {1})): // i64[1]
  %272 = Squeeze(%271, const(i64[1] : {0L})): // i64
  %273 = (%269, %272): // (i64, i64)
  
  %274 = Stack(%273, const(i32 : 0)): // i64[2]
  %275 = (%274, const(i64[2] : {32L,32L})): // (i64[2], i64[2])
  
  %276 = Concat(%275, const(i32 : 0)): // i64[4]
  %277 = Cast(DataTypes.Int64, CastMode.KDefault, %276): // i64[4]
  %278 = ResizeImage(ImageResizeMode.NearestNeighbor, ImageResizeTransformationMode.HalfPixel, ImageResizeNearestMode.RoundPreferCeil, True, %266, const(f32[0]), %277, const(f32 : -0.75), const(bool : False), const(f32 : -0)): // f32[?,128,?,?]
  %279 = Transpose(%278, const(i32[4] : {0,2,3,1})): // f32[?,?,?,128]
  %280 = Transpose(%279, const(i32[4] : {0,3,1,2})): // f32[?,128,?,?]
  %281 = ShapeOf(%280): // i64[4]
  %282 = GetPaddings(%281, const(i64[4] : {64L,128L,2L,2L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %283 = Conv2D(PadMode.Constant, %280, const(f32[64,128,2,2]), const(f32[64]), const(i32[2] : {1,1}), %282, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,64,?,?]
  %284 = Transpose(%283, const(i32[4] : {0,2,3,1})): // f32[?,?,?,64]
  %285 = LeakyRelu(%284, const(f32 : 0.3)): // f32[?,?,?,64]
  %286 = (%121, %285): // (f32[?,?,?,64], f32[?,?,?,64])
  
  %287 = Concat(%286, const(i32 : 3)): // f32[?,?,?,128]
  %288 = Transpose(%287, const(i32[4] : {0,3,1,2})): // f32[?,128,?,?]
  %289 = ShapeOf(%288): // i64[4]
  %290 = GetPaddings(%289, const(i64[4] : {64L,128L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %291 = Conv2D(PadMode.Constant, %288, const(f32[64,128,3,3]), const(f32[64]), const(i32[2] : {1,1}), %290, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,64,?,?]
  %292 = Transpose(%291, const(i32[4] : {0,2,3,1})): // f32[?,?,?,64]
  %293 = LeakyRelu(%292, const(f32 : 0.3)): // f32[?,?,?,64]
  %294 = Transpose(%293, const(i32[4] : {0,3,1,2})): // f32[?,64,?,?]
  %295 = ShapeOf(%294): // i64[4]
  %296 = GetPaddings(%295, const(i64[4] : {64L,64L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %297 = Conv2D(PadMode.Constant, %294, const(f32[64,64,3,3]), const(f32[64]), const(i32[2] : {1,1}), %296, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,64,?,?]
  %298 = Transpose(%297, const(i32[4] : {0,2,3,1})): // f32[?,?,?,64]
  %299 = LeakyRelu(%298, const(f32 : 0.3)): // f32[?,?,?,64]
  %300 = Transpose(%299, const(i32[4] : {0,3,1,2})): // f32[?,64,?,?]
  %301 = ShapeOf(%300): // i64[4]
  %302 = Slice(%301, const(i32[1] : {0}), const(i32[1] : {1}), const(i32[1] : {0}), const(i32[1] : {1})): // i64[1]
  %303 = Squeeze(%302, const(i64[1] : {0L})): // i64
  %304 = ShapeOf(%300): // i64[4]
  %305 = Slice(%304, const(i32[1] : {1}), const(i32[1] : {2}), const(i32[1] : {0}), const(i32[1] : {1})): // i64[1]
  %306 = Squeeze(%305, const(i64[1] : {0L})): // i64
  %307 = (%303, %306): // (i64, i64)
  
  %308 = Stack(%307, const(i32 : 0)): // i64[2]
  %309 = (%308, const(i64[2] : {64L,64L})): // (i64[2], i64[2])
  
  %310 = Concat(%309, const(i32 : 0)): // i64[4]
  %311 = Cast(DataTypes.Int64, CastMode.KDefault, %310): // i64[4]
  %312 = ResizeImage(ImageResizeMode.NearestNeighbor, ImageResizeTransformationMode.HalfPixel, ImageResizeNearestMode.RoundPreferCeil, True, %300, const(f32[0]), %311, const(f32 : -0.75), const(bool : False), const(f32 : -0)): // f32[?,64,?,?]
  %313 = Transpose(%312, const(i32[4] : {0,2,3,1})): // f32[?,?,?,64]
  %314 = Transpose(%313, const(i32[4] : {0,3,1,2})): // f32[?,64,?,?]
  %315 = ShapeOf(%314): // i64[4]
  %316 = GetPaddings(%315, const(i64[4] : {32L,64L,2L,2L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %317 = Conv2D(PadMode.Constant, %314, const(f32[32,64,2,2]), const(f32[32]), const(i32[2] : {1,1}), %316, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,32,?,?]
  %318 = Transpose(%317, const(i32[4] : {0,2,3,1})): // f32[?,?,?,32]
  %319 = LeakyRelu(%318, const(f32 : 0.3)): // f32[?,?,?,32]
  %320 = (%66, %319): // (f32[?,?,?,32], f32[?,?,?,32])
  
  %321 = Concat(%320, const(i32 : 3)): // f32[?,?,?,64]
  %322 = Transpose(%321, const(i32[4] : {0,3,1,2})): // f32[?,64,?,?]
  %323 = ShapeOf(%322): // i64[4]
  %324 = GetPaddings(%323, const(i64[4] : {32L,64L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %325 = Conv2D(PadMode.Constant, %322, const(f32[32,64,3,3]), const(f32[32]), const(i32[2] : {1,1}), %324, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,32,?,?]
  %326 = Transpose(%325, const(i32[4] : {0,2,3,1})): // f32[?,?,?,32]
  %327 = LeakyRelu(%326, const(f32 : 0.3)): // f32[?,?,?,32]
  %328 = Transpose(%327, const(i32[4] : {0,3,1,2})): // f32[?,32,?,?]
  %329 = ShapeOf(%328): // i64[4]
  %330 = GetPaddings(%329, const(i64[4] : {32L,32L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %331 = Conv2D(PadMode.Constant, %328, const(f32[32,32,3,3]), const(f32[32]), const(i32[2] : {1,1}), %330, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,32,?,?]
  %332 = Transpose(%331, const(i32[4] : {0,2,3,1})): // f32[?,?,?,32]
  %333 = LeakyRelu(%332, const(f32 : 0.3)): // f32[?,?,?,32]
  %334 = Transpose(%333, const(i32[4] : {0,3,1,2})): // f32[?,32,?,?]
  %335 = ShapeOf(%334): // i64[4]
  %336 = Slice(%335, const(i32[1] : {0}), const(i32[1] : {1}), const(i32[1] : {0}), const(i32[1] : {1})): // i64[1]
  %337 = Squeeze(%336, const(i64[1] : {0L})): // i64
  %338 = ShapeOf(%334): // i64[4]
  %339 = Slice(%338, const(i32[1] : {1}), const(i32[1] : {2}), const(i32[1] : {0}), const(i32[1] : {1})): // i64[1]
  %340 = Squeeze(%339, const(i64[1] : {0L})): // i64
  %341 = (%337, %340): // (i64, i64)
  
  %342 = Stack(%341, const(i32 : 0)): // i64[2]
  %343 = (%342, const(i64[2] : {128L,128L})): // (i64[2], i64[2])
  
  %344 = Concat(%343, const(i32 : 0)): // i64[4]
  %345 = Cast(DataTypes.Int64, CastMode.KDefault, %344): // i64[4]
  %346 = ResizeImage(ImageResizeMode.NearestNeighbor, ImageResizeTransformationMode.HalfPixel, ImageResizeNearestMode.RoundPreferCeil, True, %334, const(f32[0]), %345, const(f32 : -0.75), const(bool : False), const(f32 : -0)): // f32[?,32,?,?]
  %347 = Transpose(%346, const(i32[4] : {0,2,3,1})): // f32[?,?,?,32]
  %348 = Transpose(%347, const(i32[4] : {0,3,1,2})): // f32[?,32,?,?]
  %349 = ShapeOf(%348): // i64[4]
  %350 = GetPaddings(%349, const(i64[4] : {16L,32L,2L,2L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %351 = Conv2D(PadMode.Constant, %348, const(f32[16,32,2,2]), const(f32[16]), const(i32[2] : {1,1}), %350, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,16,?,?]
  %352 = Transpose(%351, const(i32[4] : {0,2,3,1})): // f32[?,?,?,16]
  %353 = LeakyRelu(%352, const(f32 : 0.3)): // f32[?,?,?,16]
  %354 = (%11, %353): // (f32[?,?,?,16], f32[?,?,?,16])
  
  %355 = Concat(%354, const(i32 : 3)): // f32[?,?,?,32]
  %356 = Transpose(%355, const(i32[4] : {0,3,1,2})): // f32[?,32,?,?]
  %357 = ShapeOf(%356): // i64[4]
  %358 = GetPaddings(%357, const(i64[4] : {16L,32L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %359 = Conv2D(PadMode.Constant, %356, const(f32[16,32,3,3]), const(f32[16]), const(i32[2] : {1,1}), %358, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,16,?,?]
  %360 = Transpose(%359, const(i32[4] : {0,2,3,1})): // f32[?,?,?,16]
  %361 = LeakyRelu(%360, const(f32 : 0.3)): // f32[?,?,?,16]
  %362 = Transpose(%361, const(i32[4] : {0,3,1,2})): // f32[?,16,?,?]
  %363 = ShapeOf(%362): // i64[4]
  %364 = GetPaddings(%363, const(i64[4] : {16L,16L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %365 = Conv2D(PadMode.Constant, %362, const(f32[16,16,3,3]), const(f32[16]), const(i32[2] : {1,1}), %364, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,16,?,?]
  %366 = Transpose(%365, const(i32[4] : {0,2,3,1})): // f32[?,?,?,16]
  %367 = LeakyRelu(%366, const(f32 : 0.3)): // f32[?,?,?,16]
  %368 = Transpose(%367, const(i32[4] : {0,3,1,2})): // f32[?,16,?,?]
  %369 = ShapeOf(%368): // i64[4]
  %370 = GetPaddings(%369, const(i64[4] : {2L,16L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %371 = Conv2D(PadMode.Constant, %368, const(f32[2,16,3,3]), const(f32[2] : {0f,0f}), const(i32[2] : {1,1}), %370, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,2,?,?]
  %372 = Transpose(%371, const(i32[4] : {0,2,3,1})): // f32[?,?,?,2]
  %373 = LeakyRelu(%372, const(f32 : 0.3)): // f32[?,?,?,2]
  %374 = Transpose(%373, const(i32[4] : {0,3,1,2})): // f32[?,2,?,?]
  %375 = ShapeOf(%374): // i64[4]
  %376 = GetPaddings(%375, const(i64[4] : {1L,2L,1L,1L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : False), const(bool : False)): // i64[2,2]
  %377 = Conv2D(PadMode.Constant, %374, const(f32[1,2,1,1] : {{{{-0.18535042f}},{{-1.2832744f}}}}), const(f32[1] : {0f}), const(i32[2] : {1,1}), %376, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,1,?,?]
  %378 = Transpose(%377, const(i32[4] : {0,2,3,1})): // f32[?,?,?,1]
  %379 = Tanh(UnaryOp.Tanh, %378): // f32[?,?,?,1]
}
