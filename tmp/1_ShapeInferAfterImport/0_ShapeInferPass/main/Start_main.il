%main = fn(%serving_default_input_1:0: f32[?,128,128,1]): // (f32[?,128,128,1]) -> f32[?,?,?,1]
{
  %0 = Transpose(%serving_default_input_1:0, const(i32[4] : {0,3,1,2})): // f32[?,1,128,128]
  %1 = Transpose(const(f32[16,3,3,1]), const(i32[4] : {0,3,1,2})): // f32[16,1,3,3]
  %2 = ShapeOf(%0): // i64[4]
  %3 = ShapeOf(%1): // i64[4]
  %4 = GetPaddings(%2, %3, const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %5 = Conv2D(PadMode.Constant, %0, %1, const(f32[16]), const(i32[2] : {1,1}), %4, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,16,?,?]
  %6 = Transpose(%5, const(i32[4] : {0,2,3,1})): // f32[?,?,?,16]
  %7 = LeakyRelu(%6, const(f32 : 0.3)): // f32[?,?,?,16]
  %8 = Transpose(%7, const(i32[4] : {0,3,1,2})): // f32[?,16,?,?]
  %9 = Transpose(const(f32[16,3,3,16]), const(i32[4] : {0,3,1,2})): // f32[16,16,3,3]
  %10 = ShapeOf(%8): // i64[4]
  %11 = ShapeOf(%9): // i64[4]
  %12 = GetPaddings(%10, %11, const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %13 = Conv2D(PadMode.Constant, %8, %9, const(f32[16]), const(i32[2] : {1,1}), %12, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,16,?,?]
  %14 = Transpose(%13, const(i32[4] : {0,2,3,1})): // f32[?,?,?,16]
  %15 = LeakyRelu(%14, const(f32 : 0.3)): // f32[?,?,?,16]
  %16 = Transpose(%15, const(i32[4] : {0,3,1,2})): // f32[?,16,?,?]
  %17 = ShapeOf(%16): // i64[4]
  %18 = (const(i32 : 2)): // (i32)
  
  %19 = Stack(%18, const(i32 : 0)): // i32[1]
  %20 = Add(BinaryOp.Add, const(i32 : 2), const(i32 : 1)): // i32
  %21 = (%20): // (i32)
  
  %22 = Stack(%21, const(i32 : 0)): // i32[1]
  %23 = Slice(%17, %19, %22, const(i32[1] : {0}), const(i32[1] : {1})): // i64[?]
  %24 = Squeeze(%23, const(i64[1] : {0L})): // i64
  %25 = Cast(DataTypes.Int32, CastMode.KDefault, %24): // i32
  %26 = Cast(DataTypes.Int32, CastMode.KDefault, const(i32 : 2)): // i32
  %27 = Sub(BinaryOp.Sub, %26, const(i32 : 1)): // i32
  %28 = Cast(DataTypes.Int32, CastMode.KDefault, const(i32 : 1)): // i32
  %29 = Mul(BinaryOp.Mul, %27, %28): // i32
  %30 = Add(BinaryOp.Add, %29, const(i32 : 1)): // i32
  %31 = Sub(BinaryOp.Sub, %25, %30): // i32
  %32 = Cast(DataTypes.Int32, CastMode.KDefault, const(i32 : 2)): // i32
  %33 = Add(BinaryOp.Add, %31, %32): // i32
  %34 = Div(BinaryOp.Div, %33, %32): // i32
  %35 = Sub(BinaryOp.Sub, %34, const(i32 : 1)): // i32
  %36 = Mul(BinaryOp.Mul, %35, %32): // i32
  %37 = Sub(BinaryOp.Sub, %26, const(i32 : 1)): // i32
  %38 = Mul(BinaryOp.Mul, %37, %28): // i32
  %39 = Add(BinaryOp.Add, %38, const(i32 : 1)): // i32
  %40 = Add(BinaryOp.Add, %36, %39): // i32
  %41 = Sub(BinaryOp.Sub, %40, %25): // i32
  %42 = Max(BinaryOp.Max, const(i32 : 0), %41): // i32
  %43 = Div(BinaryOp.Div, %42, const(i32 : 2)): // i32
  %44 = Cast(DataTypes.Int32, CastMode.KDefault, %43): // i32
  %45 = Div(BinaryOp.Div, %42, const(i32 : 2)): // i32
  %46 = Sub(BinaryOp.Sub, %42, %45): // i32
  %47 = Cast(DataTypes.Int32, CastMode.KDefault, %46): // i32
  %48 = (%44, %47): // (i32, i32)
  
  %49 = Stack(%48, const(i32 : 0)): // i32[2]
  %50 = ShapeOf(%16): // i64[4]
  %51 = (const(i32 : 3)): // (i32)
  
  %52 = Stack(%51, const(i32 : 0)): // i32[1]
  %53 = Add(BinaryOp.Add, const(i32 : 3), const(i32 : 1)): // i32
  %54 = (%53): // (i32)
  
  %55 = Stack(%54, const(i32 : 0)): // i32[1]
  %56 = Slice(%50, %52, %55, const(i32[1] : {0}), const(i32[1] : {1})): // i64[?]
  %57 = Squeeze(%56, const(i64[1] : {0L})): // i64
  %58 = Cast(DataTypes.Int32, CastMode.KDefault, %57): // i32
  %59 = Cast(DataTypes.Int32, CastMode.KDefault, const(i32 : 2)): // i32
  %60 = Sub(BinaryOp.Sub, %59, const(i32 : 1)): // i32
  %61 = Cast(DataTypes.Int32, CastMode.KDefault, const(i32 : 1)): // i32
  %62 = Mul(BinaryOp.Mul, %60, %61): // i32
  %63 = Add(BinaryOp.Add, %62, const(i32 : 1)): // i32
  %64 = Sub(BinaryOp.Sub, %58, %63): // i32
  %65 = Cast(DataTypes.Int32, CastMode.KDefault, const(i32 : 2)): // i32
  %66 = Add(BinaryOp.Add, %64, %65): // i32
  %67 = Div(BinaryOp.Div, %66, %65): // i32
  %68 = Sub(BinaryOp.Sub, %67, const(i32 : 1)): // i32
  %69 = Mul(BinaryOp.Mul, %68, %65): // i32
  %70 = Sub(BinaryOp.Sub, %59, const(i32 : 1)): // i32
  %71 = Mul(BinaryOp.Mul, %70, %61): // i32
  %72 = Add(BinaryOp.Add, %71, const(i32 : 1)): // i32
  %73 = Add(BinaryOp.Add, %69, %72): // i32
  %74 = Sub(BinaryOp.Sub, %73, %58): // i32
  %75 = Max(BinaryOp.Max, const(i32 : 0), %74): // i32
  %76 = Div(BinaryOp.Div, %75, const(i32 : 2)): // i32
  %77 = Cast(DataTypes.Int32, CastMode.KDefault, %76): // i32
  %78 = Div(BinaryOp.Div, %75, const(i32 : 2)): // i32
  %79 = Sub(BinaryOp.Sub, %75, %78): // i32
  %80 = Cast(DataTypes.Int32, CastMode.KDefault, %79): // i32
  %81 = (%77, %80): // (i32, i32)
  
  %82 = Stack(%81, const(i32 : 0)): // i32[2]
  %83 = (%49, %82): // (i32[2], i32[2])
  
  %84 = Stack(%83, const(i32 : 0)): // i32[2,2]
  %85 = ReduceWindow2D(ReduceOp.Max, %16, const(f32 : -3.4028235E+38), const(i32[2] : {2,2}), const(i32[2] : {2,2}), %84, const(i64[2] : {1L,1L}), const(bool : False), const(bool : False)): // f32[?,?,?,?]
  %86 = Transpose(%85, const(i32[4] : {0,2,3,1})): // f32[?,?,?,?]
  %87 = Transpose(%86, const(i32[4] : {0,3,1,2})): // f32[?,?,?,?]
  %88 = Transpose(const(f32[32,3,3,16]), const(i32[4] : {0,3,1,2})): // f32[32,16,3,3]
  %89 = ShapeOf(%87): // i64[4]
  %90 = ShapeOf(%88): // i64[4]
  %91 = GetPaddings(%89, %90, const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %92 = Conv2D(PadMode.Constant, %87, %88, const(f32[32]), const(i32[2] : {1,1}), %91, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,32,?,?]
  %93 = Transpose(%92, const(i32[4] : {0,2,3,1})): // f32[?,?,?,32]
  %94 = LeakyRelu(%93, const(f32 : 0.3)): // f32[?,?,?,32]
  %95 = Transpose(%94, const(i32[4] : {0,3,1,2})): // f32[?,32,?,?]
  %96 = Transpose(const(f32[32,3,3,32]), const(i32[4] : {0,3,1,2})): // f32[32,32,3,3]
  %97 = ShapeOf(%95): // i64[4]
  %98 = ShapeOf(%96): // i64[4]
  %99 = GetPaddings(%97, %98, const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %100 = Conv2D(PadMode.Constant, %95, %96, const(f32[32]), const(i32[2] : {1,1}), %99, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,32,?,?]
  %101 = Transpose(%100, const(i32[4] : {0,2,3,1})): // f32[?,?,?,32]
  %102 = LeakyRelu(%101, const(f32 : 0.3)): // f32[?,?,?,32]
  %103 = Transpose(%102, const(i32[4] : {0,3,1,2})): // f32[?,32,?,?]
  %104 = ShapeOf(%103): // i64[4]
  %105 = (const(i32 : 2)): // (i32)
  
  %106 = Stack(%105, const(i32 : 0)): // i32[1]
  %107 = Add(BinaryOp.Add, const(i32 : 2), const(i32 : 1)): // i32
  %108 = (%107): // (i32)
  
  %109 = Stack(%108, const(i32 : 0)): // i32[1]
  %110 = Slice(%104, %106, %109, const(i32[1] : {0}), const(i32[1] : {1})): // i64[?]
  %111 = Squeeze(%110, const(i64[1] : {0L})): // i64
  %112 = Cast(DataTypes.Int32, CastMode.KDefault, %111): // i32
  %113 = Cast(DataTypes.Int32, CastMode.KDefault, const(i32 : 2)): // i32
  %114 = Sub(BinaryOp.Sub, %113, const(i32 : 1)): // i32
  %115 = Cast(DataTypes.Int32, CastMode.KDefault, const(i32 : 1)): // i32
  %116 = Mul(BinaryOp.Mul, %114, %115): // i32
  %117 = Add(BinaryOp.Add, %116, const(i32 : 1)): // i32
  %118 = Sub(BinaryOp.Sub, %112, %117): // i32
  %119 = Cast(DataTypes.Int32, CastMode.KDefault, const(i32 : 2)): // i32
  %120 = Add(BinaryOp.Add, %118, %119): // i32
  %121 = Div(BinaryOp.Div, %120, %119): // i32
  %122 = Sub(BinaryOp.Sub, %121, const(i32 : 1)): // i32
  %123 = Mul(BinaryOp.Mul, %122, %119): // i32
  %124 = Sub(BinaryOp.Sub, %113, const(i32 : 1)): // i32
  %125 = Mul(BinaryOp.Mul, %124, %115): // i32
  %126 = Add(BinaryOp.Add, %125, const(i32 : 1)): // i32
  %127 = Add(BinaryOp.Add, %123, %126): // i32
  %128 = Sub(BinaryOp.Sub, %127, %112): // i32
  %129 = Max(BinaryOp.Max, const(i32 : 0), %128): // i32
  %130 = Div(BinaryOp.Div, %129, const(i32 : 2)): // i32
  %131 = Cast(DataTypes.Int32, CastMode.KDefault, %130): // i32
  %132 = Div(BinaryOp.Div, %129, const(i32 : 2)): // i32
  %133 = Sub(BinaryOp.Sub, %129, %132): // i32
  %134 = Cast(DataTypes.Int32, CastMode.KDefault, %133): // i32
  %135 = (%131, %134): // (i32, i32)
  
  %136 = Stack(%135, const(i32 : 0)): // i32[2]
  %137 = ShapeOf(%103): // i64[4]
  %138 = (const(i32 : 3)): // (i32)
  
  %139 = Stack(%138, const(i32 : 0)): // i32[1]
  %140 = Add(BinaryOp.Add, const(i32 : 3), const(i32 : 1)): // i32
  %141 = (%140): // (i32)
  
  %142 = Stack(%141, const(i32 : 0)): // i32[1]
  %143 = Slice(%137, %139, %142, const(i32[1] : {0}), const(i32[1] : {1})): // i64[?]
  %144 = Squeeze(%143, const(i64[1] : {0L})): // i64
  %145 = Cast(DataTypes.Int32, CastMode.KDefault, %144): // i32
  %146 = Cast(DataTypes.Int32, CastMode.KDefault, const(i32 : 2)): // i32
  %147 = Sub(BinaryOp.Sub, %146, const(i32 : 1)): // i32
  %148 = Cast(DataTypes.Int32, CastMode.KDefault, const(i32 : 1)): // i32
  %149 = Mul(BinaryOp.Mul, %147, %148): // i32
  %150 = Add(BinaryOp.Add, %149, const(i32 : 1)): // i32
  %151 = Sub(BinaryOp.Sub, %145, %150): // i32
  %152 = Cast(DataTypes.Int32, CastMode.KDefault, const(i32 : 2)): // i32
  %153 = Add(BinaryOp.Add, %151, %152): // i32
  %154 = Div(BinaryOp.Div, %153, %152): // i32
  %155 = Sub(BinaryOp.Sub, %154, const(i32 : 1)): // i32
  %156 = Mul(BinaryOp.Mul, %155, %152): // i32
  %157 = Sub(BinaryOp.Sub, %146, const(i32 : 1)): // i32
  %158 = Mul(BinaryOp.Mul, %157, %148): // i32
  %159 = Add(BinaryOp.Add, %158, const(i32 : 1)): // i32
  %160 = Add(BinaryOp.Add, %156, %159): // i32
  %161 = Sub(BinaryOp.Sub, %160, %145): // i32
  %162 = Max(BinaryOp.Max, const(i32 : 0), %161): // i32
  %163 = Div(BinaryOp.Div, %162, const(i32 : 2)): // i32
  %164 = Cast(DataTypes.Int32, CastMode.KDefault, %163): // i32
  %165 = Div(BinaryOp.Div, %162, const(i32 : 2)): // i32
  %166 = Sub(BinaryOp.Sub, %162, %165): // i32
  %167 = Cast(DataTypes.Int32, CastMode.KDefault, %166): // i32
  %168 = (%164, %167): // (i32, i32)
  
  %169 = Stack(%168, const(i32 : 0)): // i32[2]
  %170 = (%136, %169): // (i32[2], i32[2])
  
  %171 = Stack(%170, const(i32 : 0)): // i32[2,2]
  %172 = ReduceWindow2D(ReduceOp.Max, %103, const(f32 : -3.4028235E+38), const(i32[2] : {2,2}), const(i32[2] : {2,2}), %171, const(i64[2] : {1L,1L}), const(bool : False), const(bool : False)): // f32[?,?,?,?]
  %173 = Transpose(%172, const(i32[4] : {0,2,3,1})): // f32[?,?,?,?]
  %174 = Transpose(%173, const(i32[4] : {0,3,1,2})): // f32[?,?,?,?]
  %175 = Transpose(const(f32[64,3,3,32]), const(i32[4] : {0,3,1,2})): // f32[64,32,3,3]
  %176 = ShapeOf(%174): // i64[4]
  %177 = ShapeOf(%175): // i64[4]
  %178 = GetPaddings(%176, %177, const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %179 = Conv2D(PadMode.Constant, %174, %175, const(f32[64]), const(i32[2] : {1,1}), %178, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,64,?,?]
  %180 = Transpose(%179, const(i32[4] : {0,2,3,1})): // f32[?,?,?,64]
  %181 = LeakyRelu(%180, const(f32 : 0.3)): // f32[?,?,?,64]
  %182 = Transpose(%181, const(i32[4] : {0,3,1,2})): // f32[?,64,?,?]
  %183 = Transpose(const(f32[64,3,3,64]), const(i32[4] : {0,3,1,2})): // f32[64,64,3,3]
  %184 = ShapeOf(%182): // i64[4]
  %185 = ShapeOf(%183): // i64[4]
  %186 = GetPaddings(%184, %185, const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %187 = Conv2D(PadMode.Constant, %182, %183, const(f32[64]), const(i32[2] : {1,1}), %186, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,64,?,?]
  %188 = Transpose(%187, const(i32[4] : {0,2,3,1})): // f32[?,?,?,64]
  %189 = LeakyRelu(%188, const(f32 : 0.3)): // f32[?,?,?,64]
  %190 = Transpose(%189, const(i32[4] : {0,3,1,2})): // f32[?,64,?,?]
  %191 = ShapeOf(%190): // i64[4]
  %192 = (const(i32 : 2)): // (i32)
  
  %193 = Stack(%192, const(i32 : 0)): // i32[1]
  %194 = Add(BinaryOp.Add, const(i32 : 2), const(i32 : 1)): // i32
  %195 = (%194): // (i32)
  
  %196 = Stack(%195, const(i32 : 0)): // i32[1]
  %197 = Slice(%191, %193, %196, const(i32[1] : {0}), const(i32[1] : {1})): // i64[?]
  %198 = Squeeze(%197, const(i64[1] : {0L})): // i64
  %199 = Cast(DataTypes.Int32, CastMode.KDefault, %198): // i32
  %200 = Cast(DataTypes.Int32, CastMode.KDefault, const(i32 : 2)): // i32
  %201 = Sub(BinaryOp.Sub, %200, const(i32 : 1)): // i32
  %202 = Cast(DataTypes.Int32, CastMode.KDefault, const(i32 : 1)): // i32
  %203 = Mul(BinaryOp.Mul, %201, %202): // i32
  %204 = Add(BinaryOp.Add, %203, const(i32 : 1)): // i32
  %205 = Sub(BinaryOp.Sub, %199, %204): // i32
  %206 = Cast(DataTypes.Int32, CastMode.KDefault, const(i32 : 2)): // i32
  %207 = Add(BinaryOp.Add, %205, %206): // i32
  %208 = Div(BinaryOp.Div, %207, %206): // i32
  %209 = Sub(BinaryOp.Sub, %208, const(i32 : 1)): // i32
  %210 = Mul(BinaryOp.Mul, %209, %206): // i32
  %211 = Sub(BinaryOp.Sub, %200, const(i32 : 1)): // i32
  %212 = Mul(BinaryOp.Mul, %211, %202): // i32
  %213 = Add(BinaryOp.Add, %212, const(i32 : 1)): // i32
  %214 = Add(BinaryOp.Add, %210, %213): // i32
  %215 = Sub(BinaryOp.Sub, %214, %199): // i32
  %216 = Max(BinaryOp.Max, const(i32 : 0), %215): // i32
  %217 = Div(BinaryOp.Div, %216, const(i32 : 2)): // i32
  %218 = Cast(DataTypes.Int32, CastMode.KDefault, %217): // i32
  %219 = Div(BinaryOp.Div, %216, const(i32 : 2)): // i32
  %220 = Sub(BinaryOp.Sub, %216, %219): // i32
  %221 = Cast(DataTypes.Int32, CastMode.KDefault, %220): // i32
  %222 = (%218, %221): // (i32, i32)
  
  %223 = Stack(%222, const(i32 : 0)): // i32[2]
  %224 = ShapeOf(%190): // i64[4]
  %225 = (const(i32 : 3)): // (i32)
  
  %226 = Stack(%225, const(i32 : 0)): // i32[1]
  %227 = Add(BinaryOp.Add, const(i32 : 3), const(i32 : 1)): // i32
  %228 = (%227): // (i32)
  
  %229 = Stack(%228, const(i32 : 0)): // i32[1]
  %230 = Slice(%224, %226, %229, const(i32[1] : {0}), const(i32[1] : {1})): // i64[?]
  %231 = Squeeze(%230, const(i64[1] : {0L})): // i64
  %232 = Cast(DataTypes.Int32, CastMode.KDefault, %231): // i32
  %233 = Cast(DataTypes.Int32, CastMode.KDefault, const(i32 : 2)): // i32
  %234 = Sub(BinaryOp.Sub, %233, const(i32 : 1)): // i32
  %235 = Cast(DataTypes.Int32, CastMode.KDefault, const(i32 : 1)): // i32
  %236 = Mul(BinaryOp.Mul, %234, %235): // i32
  %237 = Add(BinaryOp.Add, %236, const(i32 : 1)): // i32
  %238 = Sub(BinaryOp.Sub, %232, %237): // i32
  %239 = Cast(DataTypes.Int32, CastMode.KDefault, const(i32 : 2)): // i32
  %240 = Add(BinaryOp.Add, %238, %239): // i32
  %241 = Div(BinaryOp.Div, %240, %239): // i32
  %242 = Sub(BinaryOp.Sub, %241, const(i32 : 1)): // i32
  %243 = Mul(BinaryOp.Mul, %242, %239): // i32
  %244 = Sub(BinaryOp.Sub, %233, const(i32 : 1)): // i32
  %245 = Mul(BinaryOp.Mul, %244, %235): // i32
  %246 = Add(BinaryOp.Add, %245, const(i32 : 1)): // i32
  %247 = Add(BinaryOp.Add, %243, %246): // i32
  %248 = Sub(BinaryOp.Sub, %247, %232): // i32
  %249 = Max(BinaryOp.Max, const(i32 : 0), %248): // i32
  %250 = Div(BinaryOp.Div, %249, const(i32 : 2)): // i32
  %251 = Cast(DataTypes.Int32, CastMode.KDefault, %250): // i32
  %252 = Div(BinaryOp.Div, %249, const(i32 : 2)): // i32
  %253 = Sub(BinaryOp.Sub, %249, %252): // i32
  %254 = Cast(DataTypes.Int32, CastMode.KDefault, %253): // i32
  %255 = (%251, %254): // (i32, i32)
  
  %256 = Stack(%255, const(i32 : 0)): // i32[2]
  %257 = (%223, %256): // (i32[2], i32[2])
  
  %258 = Stack(%257, const(i32 : 0)): // i32[2,2]
  %259 = ReduceWindow2D(ReduceOp.Max, %190, const(f32 : -3.4028235E+38), const(i32[2] : {2,2}), const(i32[2] : {2,2}), %258, const(i64[2] : {1L,1L}), const(bool : False), const(bool : False)): // f32[?,?,?,?]
  %260 = Transpose(%259, const(i32[4] : {0,2,3,1})): // f32[?,?,?,?]
  %261 = Transpose(%260, const(i32[4] : {0,3,1,2})): // f32[?,?,?,?]
  %262 = Transpose(const(f32[128,3,3,64]), const(i32[4] : {0,3,1,2})): // f32[128,64,3,3]
  %263 = ShapeOf(%261): // i64[4]
  %264 = ShapeOf(%262): // i64[4]
  %265 = GetPaddings(%263, %264, const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %266 = Conv2D(PadMode.Constant, %261, %262, const(f32[128]), const(i32[2] : {1,1}), %265, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,128,?,?]
  %267 = Transpose(%266, const(i32[4] : {0,2,3,1})): // f32[?,?,?,128]
  %268 = LeakyRelu(%267, const(f32 : 0.3)): // f32[?,?,?,128]
  %269 = Transpose(%268, const(i32[4] : {0,3,1,2})): // f32[?,128,?,?]
  %270 = Transpose(const(f32[128,3,3,128]), const(i32[4] : {0,3,1,2})): // f32[128,128,3,3]
  %271 = ShapeOf(%269): // i64[4]
  %272 = ShapeOf(%270): // i64[4]
  %273 = GetPaddings(%271, %272, const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %274 = Conv2D(PadMode.Constant, %269, %270, const(f32[128]), const(i32[2] : {1,1}), %273, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,128,?,?]
  %275 = Transpose(%274, const(i32[4] : {0,2,3,1})): // f32[?,?,?,128]
  %276 = LeakyRelu(%275, const(f32 : 0.3)): // f32[?,?,?,128]
  %277 = Transpose(%276, const(i32[4] : {0,3,1,2})): // f32[?,128,?,?]
  %278 = ShapeOf(%277): // i64[4]
  %279 = (const(i32 : 2)): // (i32)
  
  %280 = Stack(%279, const(i32 : 0)): // i32[1]
  %281 = Add(BinaryOp.Add, const(i32 : 2), const(i32 : 1)): // i32
  %282 = (%281): // (i32)
  
  %283 = Stack(%282, const(i32 : 0)): // i32[1]
  %284 = Slice(%278, %280, %283, const(i32[1] : {0}), const(i32[1] : {1})): // i64[?]
  %285 = Squeeze(%284, const(i64[1] : {0L})): // i64
  %286 = Cast(DataTypes.Int32, CastMode.KDefault, %285): // i32
  %287 = Cast(DataTypes.Int32, CastMode.KDefault, const(i32 : 2)): // i32
  %288 = Sub(BinaryOp.Sub, %287, const(i32 : 1)): // i32
  %289 = Cast(DataTypes.Int32, CastMode.KDefault, const(i32 : 1)): // i32
  %290 = Mul(BinaryOp.Mul, %288, %289): // i32
  %291 = Add(BinaryOp.Add, %290, const(i32 : 1)): // i32
  %292 = Sub(BinaryOp.Sub, %286, %291): // i32
  %293 = Cast(DataTypes.Int32, CastMode.KDefault, const(i32 : 2)): // i32
  %294 = Add(BinaryOp.Add, %292, %293): // i32
  %295 = Div(BinaryOp.Div, %294, %293): // i32
  %296 = Sub(BinaryOp.Sub, %295, const(i32 : 1)): // i32
  %297 = Mul(BinaryOp.Mul, %296, %293): // i32
  %298 = Sub(BinaryOp.Sub, %287, const(i32 : 1)): // i32
  %299 = Mul(BinaryOp.Mul, %298, %289): // i32
  %300 = Add(BinaryOp.Add, %299, const(i32 : 1)): // i32
  %301 = Add(BinaryOp.Add, %297, %300): // i32
  %302 = Sub(BinaryOp.Sub, %301, %286): // i32
  %303 = Max(BinaryOp.Max, const(i32 : 0), %302): // i32
  %304 = Div(BinaryOp.Div, %303, const(i32 : 2)): // i32
  %305 = Cast(DataTypes.Int32, CastMode.KDefault, %304): // i32
  %306 = Div(BinaryOp.Div, %303, const(i32 : 2)): // i32
  %307 = Sub(BinaryOp.Sub, %303, %306): // i32
  %308 = Cast(DataTypes.Int32, CastMode.KDefault, %307): // i32
  %309 = (%305, %308): // (i32, i32)
  
  %310 = Stack(%309, const(i32 : 0)): // i32[2]
  %311 = ShapeOf(%277): // i64[4]
  %312 = (const(i32 : 3)): // (i32)
  
  %313 = Stack(%312, const(i32 : 0)): // i32[1]
  %314 = Add(BinaryOp.Add, const(i32 : 3), const(i32 : 1)): // i32
  %315 = (%314): // (i32)
  
  %316 = Stack(%315, const(i32 : 0)): // i32[1]
  %317 = Slice(%311, %313, %316, const(i32[1] : {0}), const(i32[1] : {1})): // i64[?]
  %318 = Squeeze(%317, const(i64[1] : {0L})): // i64
  %319 = Cast(DataTypes.Int32, CastMode.KDefault, %318): // i32
  %320 = Cast(DataTypes.Int32, CastMode.KDefault, const(i32 : 2)): // i32
  %321 = Sub(BinaryOp.Sub, %320, const(i32 : 1)): // i32
  %322 = Cast(DataTypes.Int32, CastMode.KDefault, const(i32 : 1)): // i32
  %323 = Mul(BinaryOp.Mul, %321, %322): // i32
  %324 = Add(BinaryOp.Add, %323, const(i32 : 1)): // i32
  %325 = Sub(BinaryOp.Sub, %319, %324): // i32
  %326 = Cast(DataTypes.Int32, CastMode.KDefault, const(i32 : 2)): // i32
  %327 = Add(BinaryOp.Add, %325, %326): // i32
  %328 = Div(BinaryOp.Div, %327, %326): // i32
  %329 = Sub(BinaryOp.Sub, %328, const(i32 : 1)): // i32
  %330 = Mul(BinaryOp.Mul, %329, %326): // i32
  %331 = Sub(BinaryOp.Sub, %320, const(i32 : 1)): // i32
  %332 = Mul(BinaryOp.Mul, %331, %322): // i32
  %333 = Add(BinaryOp.Add, %332, const(i32 : 1)): // i32
  %334 = Add(BinaryOp.Add, %330, %333): // i32
  %335 = Sub(BinaryOp.Sub, %334, %319): // i32
  %336 = Max(BinaryOp.Max, const(i32 : 0), %335): // i32
  %337 = Div(BinaryOp.Div, %336, const(i32 : 2)): // i32
  %338 = Cast(DataTypes.Int32, CastMode.KDefault, %337): // i32
  %339 = Div(BinaryOp.Div, %336, const(i32 : 2)): // i32
  %340 = Sub(BinaryOp.Sub, %336, %339): // i32
  %341 = Cast(DataTypes.Int32, CastMode.KDefault, %340): // i32
  %342 = (%338, %341): // (i32, i32)
  
  %343 = Stack(%342, const(i32 : 0)): // i32[2]
  %344 = (%310, %343): // (i32[2], i32[2])
  
  %345 = Stack(%344, const(i32 : 0)): // i32[2,2]
  %346 = ReduceWindow2D(ReduceOp.Max, %277, const(f32 : -3.4028235E+38), const(i32[2] : {2,2}), const(i32[2] : {2,2}), %345, const(i64[2] : {1L,1L}), const(bool : False), const(bool : False)): // f32[?,?,?,?]
  %347 = Transpose(%346, const(i32[4] : {0,2,3,1})): // f32[?,?,?,?]
  %348 = Transpose(%347, const(i32[4] : {0,3,1,2})): // f32[?,?,?,?]
  %349 = Transpose(const(f32[256,3,3,128]), const(i32[4] : {0,3,1,2})): // f32[256,128,3,3]
  %350 = ShapeOf(%348): // i64[4]
  %351 = ShapeOf(%349): // i64[4]
  %352 = GetPaddings(%350, %351, const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %353 = Conv2D(PadMode.Constant, %348, %349, const(f32[256]), const(i32[2] : {1,1}), %352, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,256,?,?]
  %354 = Transpose(%353, const(i32[4] : {0,2,3,1})): // f32[?,?,?,256]
  %355 = LeakyRelu(%354, const(f32 : 0.3)): // f32[?,?,?,256]
  %356 = Transpose(%355, const(i32[4] : {0,3,1,2})): // f32[?,256,?,?]
  %357 = Transpose(const(f32[256,3,3,256]), const(i32[4] : {0,3,1,2})): // f32[256,256,3,3]
  %358 = ShapeOf(%356): // i64[4]
  %359 = ShapeOf(%357): // i64[4]
  %360 = GetPaddings(%358, %359, const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %361 = Conv2D(PadMode.Constant, %356, %357, const(f32[256]), const(i32[2] : {1,1}), %360, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,256,?,?]
  %362 = Transpose(%361, const(i32[4] : {0,2,3,1})): // f32[?,?,?,256]
  %363 = LeakyRelu(%362, const(f32 : 0.3)): // f32[?,?,?,256]
  %364 = Transpose(%363, const(i32[4] : {0,3,1,2})): // f32[?,256,?,?]
  %365 = ShapeOf(%364): // i64[4]
  %366 = (const(i32 : 0)): // (i32)
  
  %367 = Stack(%366, const(i32 : 0)): // i32[1]
  %368 = Add(BinaryOp.Add, const(i32 : 0), const(i32 : 1)): // i32
  %369 = (%368): // (i32)
  
  %370 = Stack(%369, const(i32 : 0)): // i32[1]
  %371 = Slice(%365, %367, %370, const(i32[1] : {0}), const(i32[1] : {1})): // i64[?]
  %372 = Squeeze(%371, const(i64[1] : {0L})): // i64
  %373 = ShapeOf(%364): // i64[4]
  %374 = (const(i32 : 1)): // (i32)
  
  %375 = Stack(%374, const(i32 : 0)): // i32[1]
  %376 = Add(BinaryOp.Add, const(i32 : 1), const(i32 : 1)): // i32
  %377 = (%376): // (i32)
  
  %378 = Stack(%377, const(i32 : 0)): // i32[1]
  %379 = Slice(%373, %375, %378, const(i32[1] : {0}), const(i32[1] : {1})): // i64[?]
  %380 = Squeeze(%379, const(i64[1] : {0L})): // i64
  %381 = (%372, %380): // (i64, i64)
  
  %382 = Stack(%381, const(i32 : 0)): // i64[2]
  %383 = Cast(DataTypes.Int64, CastMode.KDefault, const(i32[2] : {16,16})): // i64[2]
  %384 = (%382, %383): // (i64[2], i64[2])
  
  %385 = Concat(%384, const(i32 : 0)): // i64[4]
  %386 = Cast(DataTypes.Int64, CastMode.KDefault, %385): // i64[4]
  %387 = ResizeImage(ImageResizeMode.NearestNeighbor, ImageResizeTransformationMode.HalfPixel, ImageResizeNearestMode.RoundPreferCeil, True, %364, const(f32[0]), %386, const(f32 : -0.75), const(bool : False), const(f32 : -0)): // f32[?,256,?,?]
  %388 = Transpose(%387, const(i32[4] : {0,2,3,1})): // f32[?,?,?,256]
  %389 = Transpose(%388, const(i32[4] : {0,3,1,2})): // f32[?,256,?,?]
  %390 = Transpose(const(f32[128,2,2,256]), const(i32[4] : {0,3,1,2})): // f32[128,256,2,2]
  %391 = ShapeOf(%389): // i64[4]
  %392 = ShapeOf(%390): // i64[4]
  %393 = GetPaddings(%391, %392, const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %394 = Conv2D(PadMode.Constant, %389, %390, const(f32[128]), const(i32[2] : {1,1}), %393, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,128,?,?]
  %395 = Transpose(%394, const(i32[4] : {0,2,3,1})): // f32[?,?,?,128]
  %396 = LeakyRelu(%395, const(f32 : 0.3)): // f32[?,?,?,128]
  %397 = (%276, %396): // (f32[?,?,?,128], f32[?,?,?,128])
  
  %398 = Concat(%397, const(i32 : 3)): // f32[?,?,?,256]
  %399 = Transpose(%398, const(i32[4] : {0,3,1,2})): // f32[?,256,?,?]
  %400 = Transpose(const(f32[128,3,3,256]), const(i32[4] : {0,3,1,2})): // f32[128,256,3,3]
  %401 = ShapeOf(%399): // i64[4]
  %402 = ShapeOf(%400): // i64[4]
  %403 = GetPaddings(%401, %402, const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %404 = Conv2D(PadMode.Constant, %399, %400, const(f32[128]), const(i32[2] : {1,1}), %403, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,128,?,?]
  %405 = Transpose(%404, const(i32[4] : {0,2,3,1})): // f32[?,?,?,128]
  %406 = LeakyRelu(%405, const(f32 : 0.3)): // f32[?,?,?,128]
  %407 = Transpose(%406, const(i32[4] : {0,3,1,2})): // f32[?,128,?,?]
  %408 = Transpose(const(f32[128,3,3,128]), const(i32[4] : {0,3,1,2})): // f32[128,128,3,3]
  %409 = ShapeOf(%407): // i64[4]
  %410 = ShapeOf(%408): // i64[4]
  %411 = GetPaddings(%409, %410, const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %412 = Conv2D(PadMode.Constant, %407, %408, const(f32[128]), const(i32[2] : {1,1}), %411, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,128,?,?]
  %413 = Transpose(%412, const(i32[4] : {0,2,3,1})): // f32[?,?,?,128]
  %414 = LeakyRelu(%413, const(f32 : 0.3)): // f32[?,?,?,128]
  %415 = Transpose(%414, const(i32[4] : {0,3,1,2})): // f32[?,128,?,?]
  %416 = ShapeOf(%415): // i64[4]
  %417 = (const(i32 : 0)): // (i32)
  
  %418 = Stack(%417, const(i32 : 0)): // i32[1]
  %419 = Add(BinaryOp.Add, const(i32 : 0), const(i32 : 1)): // i32
  %420 = (%419): // (i32)
  
  %421 = Stack(%420, const(i32 : 0)): // i32[1]
  %422 = Slice(%416, %418, %421, const(i32[1] : {0}), const(i32[1] : {1})): // i64[?]
  %423 = Squeeze(%422, const(i64[1] : {0L})): // i64
  %424 = ShapeOf(%415): // i64[4]
  %425 = (const(i32 : 1)): // (i32)
  
  %426 = Stack(%425, const(i32 : 0)): // i32[1]
  %427 = Add(BinaryOp.Add, const(i32 : 1), const(i32 : 1)): // i32
  %428 = (%427): // (i32)
  
  %429 = Stack(%428, const(i32 : 0)): // i32[1]
  %430 = Slice(%424, %426, %429, const(i32[1] : {0}), const(i32[1] : {1})): // i64[?]
  %431 = Squeeze(%430, const(i64[1] : {0L})): // i64
  %432 = (%423, %431): // (i64, i64)
  
  %433 = Stack(%432, const(i32 : 0)): // i64[2]
  %434 = Cast(DataTypes.Int64, CastMode.KDefault, const(i32[2] : {32,32})): // i64[2]
  %435 = (%433, %434): // (i64[2], i64[2])
  
  %436 = Concat(%435, const(i32 : 0)): // i64[4]
  %437 = Cast(DataTypes.Int64, CastMode.KDefault, %436): // i64[4]
  %438 = ResizeImage(ImageResizeMode.NearestNeighbor, ImageResizeTransformationMode.HalfPixel, ImageResizeNearestMode.RoundPreferCeil, True, %415, const(f32[0]), %437, const(f32 : -0.75), const(bool : False), const(f32 : -0)): // f32[?,128,?,?]
  %439 = Transpose(%438, const(i32[4] : {0,2,3,1})): // f32[?,?,?,128]
  %440 = Transpose(%439, const(i32[4] : {0,3,1,2})): // f32[?,128,?,?]
  %441 = Transpose(const(f32[64,2,2,128]), const(i32[4] : {0,3,1,2})): // f32[64,128,2,2]
  %442 = ShapeOf(%440): // i64[4]
  %443 = ShapeOf(%441): // i64[4]
  %444 = GetPaddings(%442, %443, const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %445 = Conv2D(PadMode.Constant, %440, %441, const(f32[64]), const(i32[2] : {1,1}), %444, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,64,?,?]
  %446 = Transpose(%445, const(i32[4] : {0,2,3,1})): // f32[?,?,?,64]
  %447 = LeakyRelu(%446, const(f32 : 0.3)): // f32[?,?,?,64]
  %448 = (%189, %447): // (f32[?,?,?,64], f32[?,?,?,64])
  
  %449 = Concat(%448, const(i32 : 3)): // f32[?,?,?,128]
  %450 = Transpose(%449, const(i32[4] : {0,3,1,2})): // f32[?,128,?,?]
  %451 = Transpose(const(f32[64,3,3,128]), const(i32[4] : {0,3,1,2})): // f32[64,128,3,3]
  %452 = ShapeOf(%450): // i64[4]
  %453 = ShapeOf(%451): // i64[4]
  %454 = GetPaddings(%452, %453, const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %455 = Conv2D(PadMode.Constant, %450, %451, const(f32[64]), const(i32[2] : {1,1}), %454, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,64,?,?]
  %456 = Transpose(%455, const(i32[4] : {0,2,3,1})): // f32[?,?,?,64]
  %457 = LeakyRelu(%456, const(f32 : 0.3)): // f32[?,?,?,64]
  %458 = Transpose(%457, const(i32[4] : {0,3,1,2})): // f32[?,64,?,?]
  %459 = Transpose(const(f32[64,3,3,64]), const(i32[4] : {0,3,1,2})): // f32[64,64,3,3]
  %460 = ShapeOf(%458): // i64[4]
  %461 = ShapeOf(%459): // i64[4]
  %462 = GetPaddings(%460, %461, const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %463 = Conv2D(PadMode.Constant, %458, %459, const(f32[64]), const(i32[2] : {1,1}), %462, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,64,?,?]
  %464 = Transpose(%463, const(i32[4] : {0,2,3,1})): // f32[?,?,?,64]
  %465 = LeakyRelu(%464, const(f32 : 0.3)): // f32[?,?,?,64]
  %466 = Transpose(%465, const(i32[4] : {0,3,1,2})): // f32[?,64,?,?]
  %467 = ShapeOf(%466): // i64[4]
  %468 = (const(i32 : 0)): // (i32)
  
  %469 = Stack(%468, const(i32 : 0)): // i32[1]
  %470 = Add(BinaryOp.Add, const(i32 : 0), const(i32 : 1)): // i32
  %471 = (%470): // (i32)
  
  %472 = Stack(%471, const(i32 : 0)): // i32[1]
  %473 = Slice(%467, %469, %472, const(i32[1] : {0}), const(i32[1] : {1})): // i64[?]
  %474 = Squeeze(%473, const(i64[1] : {0L})): // i64
  %475 = ShapeOf(%466): // i64[4]
  %476 = (const(i32 : 1)): // (i32)
  
  %477 = Stack(%476, const(i32 : 0)): // i32[1]
  %478 = Add(BinaryOp.Add, const(i32 : 1), const(i32 : 1)): // i32
  %479 = (%478): // (i32)
  
  %480 = Stack(%479, const(i32 : 0)): // i32[1]
  %481 = Slice(%475, %477, %480, const(i32[1] : {0}), const(i32[1] : {1})): // i64[?]
  %482 = Squeeze(%481, const(i64[1] : {0L})): // i64
  %483 = (%474, %482): // (i64, i64)
  
  %484 = Stack(%483, const(i32 : 0)): // i64[2]
  %485 = Cast(DataTypes.Int64, CastMode.KDefault, const(i32[2] : {64,64})): // i64[2]
  %486 = (%484, %485): // (i64[2], i64[2])
  
  %487 = Concat(%486, const(i32 : 0)): // i64[4]
  %488 = Cast(DataTypes.Int64, CastMode.KDefault, %487): // i64[4]
  %489 = ResizeImage(ImageResizeMode.NearestNeighbor, ImageResizeTransformationMode.HalfPixel, ImageResizeNearestMode.RoundPreferCeil, True, %466, const(f32[0]), %488, const(f32 : -0.75), const(bool : False), const(f32 : -0)): // f32[?,64,?,?]
  %490 = Transpose(%489, const(i32[4] : {0,2,3,1})): // f32[?,?,?,64]
  %491 = Transpose(%490, const(i32[4] : {0,3,1,2})): // f32[?,64,?,?]
  %492 = Transpose(const(f32[32,2,2,64]), const(i32[4] : {0,3,1,2})): // f32[32,64,2,2]
  %493 = ShapeOf(%491): // i64[4]
  %494 = ShapeOf(%492): // i64[4]
  %495 = GetPaddings(%493, %494, const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %496 = Conv2D(PadMode.Constant, %491, %492, const(f32[32]), const(i32[2] : {1,1}), %495, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,32,?,?]
  %497 = Transpose(%496, const(i32[4] : {0,2,3,1})): // f32[?,?,?,32]
  %498 = LeakyRelu(%497, const(f32 : 0.3)): // f32[?,?,?,32]
  %499 = (%102, %498): // (f32[?,?,?,32], f32[?,?,?,32])
  
  %500 = Concat(%499, const(i32 : 3)): // f32[?,?,?,64]
  %501 = Transpose(%500, const(i32[4] : {0,3,1,2})): // f32[?,64,?,?]
  %502 = Transpose(const(f32[32,3,3,64]), const(i32[4] : {0,3,1,2})): // f32[32,64,3,3]
  %503 = ShapeOf(%501): // i64[4]
  %504 = ShapeOf(%502): // i64[4]
  %505 = GetPaddings(%503, %504, const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %506 = Conv2D(PadMode.Constant, %501, %502, const(f32[32]), const(i32[2] : {1,1}), %505, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,32,?,?]
  %507 = Transpose(%506, const(i32[4] : {0,2,3,1})): // f32[?,?,?,32]
  %508 = LeakyRelu(%507, const(f32 : 0.3)): // f32[?,?,?,32]
  %509 = Transpose(%508, const(i32[4] : {0,3,1,2})): // f32[?,32,?,?]
  %510 = Transpose(const(f32[32,3,3,32]), const(i32[4] : {0,3,1,2})): // f32[32,32,3,3]
  %511 = ShapeOf(%509): // i64[4]
  %512 = ShapeOf(%510): // i64[4]
  %513 = GetPaddings(%511, %512, const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %514 = Conv2D(PadMode.Constant, %509, %510, const(f32[32]), const(i32[2] : {1,1}), %513, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,32,?,?]
  %515 = Transpose(%514, const(i32[4] : {0,2,3,1})): // f32[?,?,?,32]
  %516 = LeakyRelu(%515, const(f32 : 0.3)): // f32[?,?,?,32]
  %517 = Transpose(%516, const(i32[4] : {0,3,1,2})): // f32[?,32,?,?]
  %518 = ShapeOf(%517): // i64[4]
  %519 = (const(i32 : 0)): // (i32)
  
  %520 = Stack(%519, const(i32 : 0)): // i32[1]
  %521 = Add(BinaryOp.Add, const(i32 : 0), const(i32 : 1)): // i32
  %522 = (%521): // (i32)
  
  %523 = Stack(%522, const(i32 : 0)): // i32[1]
  %524 = Slice(%518, %520, %523, const(i32[1] : {0}), const(i32[1] : {1})): // i64[?]
  %525 = Squeeze(%524, const(i64[1] : {0L})): // i64
  %526 = ShapeOf(%517): // i64[4]
  %527 = (const(i32 : 1)): // (i32)
  
  %528 = Stack(%527, const(i32 : 0)): // i32[1]
  %529 = Add(BinaryOp.Add, const(i32 : 1), const(i32 : 1)): // i32
  %530 = (%529): // (i32)
  
  %531 = Stack(%530, const(i32 : 0)): // i32[1]
  %532 = Slice(%526, %528, %531, const(i32[1] : {0}), const(i32[1] : {1})): // i64[?]
  %533 = Squeeze(%532, const(i64[1] : {0L})): // i64
  %534 = (%525, %533): // (i64, i64)
  
  %535 = Stack(%534, const(i32 : 0)): // i64[2]
  %536 = Cast(DataTypes.Int64, CastMode.KDefault, const(i32[2] : {128,128})): // i64[2]
  %537 = (%535, %536): // (i64[2], i64[2])
  
  %538 = Concat(%537, const(i32 : 0)): // i64[4]
  %539 = Cast(DataTypes.Int64, CastMode.KDefault, %538): // i64[4]
  %540 = ResizeImage(ImageResizeMode.NearestNeighbor, ImageResizeTransformationMode.HalfPixel, ImageResizeNearestMode.RoundPreferCeil, True, %517, const(f32[0]), %539, const(f32 : -0.75), const(bool : False), const(f32 : -0)): // f32[?,32,?,?]
  %541 = Transpose(%540, const(i32[4] : {0,2,3,1})): // f32[?,?,?,32]
  %542 = Transpose(%541, const(i32[4] : {0,3,1,2})): // f32[?,32,?,?]
  %543 = Transpose(const(f32[16,2,2,32]), const(i32[4] : {0,3,1,2})): // f32[16,32,2,2]
  %544 = ShapeOf(%542): // i64[4]
  %545 = ShapeOf(%543): // i64[4]
  %546 = GetPaddings(%544, %545, const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %547 = Conv2D(PadMode.Constant, %542, %543, const(f32[16]), const(i32[2] : {1,1}), %546, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,16,?,?]
  %548 = Transpose(%547, const(i32[4] : {0,2,3,1})): // f32[?,?,?,16]
  %549 = LeakyRelu(%548, const(f32 : 0.3)): // f32[?,?,?,16]
  %550 = (%15, %549): // (f32[?,?,?,16], f32[?,?,?,16])
  
  %551 = Concat(%550, const(i32 : 3)): // f32[?,?,?,32]
  %552 = Transpose(%551, const(i32[4] : {0,3,1,2})): // f32[?,32,?,?]
  %553 = Transpose(const(f32[16,3,3,32]), const(i32[4] : {0,3,1,2})): // f32[16,32,3,3]
  %554 = ShapeOf(%552): // i64[4]
  %555 = ShapeOf(%553): // i64[4]
  %556 = GetPaddings(%554, %555, const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %557 = Conv2D(PadMode.Constant, %552, %553, const(f32[16]), const(i32[2] : {1,1}), %556, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,16,?,?]
  %558 = Transpose(%557, const(i32[4] : {0,2,3,1})): // f32[?,?,?,16]
  %559 = LeakyRelu(%558, const(f32 : 0.3)): // f32[?,?,?,16]
  %560 = Transpose(%559, const(i32[4] : {0,3,1,2})): // f32[?,16,?,?]
  %561 = Transpose(const(f32[16,3,3,16]), const(i32[4] : {0,3,1,2})): // f32[16,16,3,3]
  %562 = ShapeOf(%560): // i64[4]
  %563 = ShapeOf(%561): // i64[4]
  %564 = GetPaddings(%562, %563, const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %565 = Conv2D(PadMode.Constant, %560, %561, const(f32[16]), const(i32[2] : {1,1}), %564, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,16,?,?]
  %566 = Transpose(%565, const(i32[4] : {0,2,3,1})): // f32[?,?,?,16]
  %567 = LeakyRelu(%566, const(f32 : 0.3)): // f32[?,?,?,16]
  %568 = Transpose(%567, const(i32[4] : {0,3,1,2})): // f32[?,16,?,?]
  %569 = Transpose(const(f32[2,3,3,16]), const(i32[4] : {0,3,1,2})): // f32[2,16,3,3]
  %570 = ShapeOf(%568): // i64[4]
  %571 = ShapeOf(%569): // i64[4]
  %572 = GetPaddings(%570, %571, const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %573 = Conv2D(PadMode.Constant, %568, %569, const(f32[2] : {0f,0f}), const(i32[2] : {1,1}), %572, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,2,?,?]
  %574 = Transpose(%573, const(i32[4] : {0,2,3,1})): // f32[?,?,?,2]
  %575 = LeakyRelu(%574, const(f32 : 0.3)): // f32[?,?,?,2]
  %576 = Transpose(%575, const(i32[4] : {0,3,1,2})): // f32[?,2,?,?]
  %577 = Transpose(const(f32[1,1,1,2] : {{{{-0.18535042f,-1.2832744f}}}}), const(i32[4] : {0,3,1,2})): // f32[1,2,1,1]
  %578 = ShapeOf(%576): // i64[4]
  %579 = ShapeOf(%577): // i64[4]
  %580 = GetPaddings(%578, %579, const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : False), const(bool : False)): // i64[2,2]
  %581 = Conv2D(PadMode.Constant, %576, %577, const(f32[1] : {0f}), const(i32[2] : {1,1}), %580, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,1,?,?]
  %582 = Transpose(%581, const(i32[4] : {0,2,3,1})): // f32[?,?,?,1]
  %583 = Tanh(UnaryOp.Tanh, %582): // f32[?,?,?,1]
}
