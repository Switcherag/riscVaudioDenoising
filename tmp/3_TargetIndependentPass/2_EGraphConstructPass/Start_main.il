%main = fn(%serving_default_input_1:0: f32[?,128,128,1]): // (f32[?,128,128,1]) -> f32[?,?,?,1]
{
  %0 = Transpose(%serving_default_input_1:0, const(i32[4] : {0,3,1,2})): // f32[?,1,128,128]
  %1 = ShapeOf(%0): // i64[4]
  %2 = GetPaddings(%1, const(i64[4] : {16L,1L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %3 = Conv2D(PadMode.Constant, %0, const(f32[16,1,3,3]), const(f32[16]), const(i32[2] : {1,1}), %2, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,16,?,?]
  %4 = Transpose(%3, const(i32[4] : {0,2,3,1})): // f32[?,?,?,16]
  %5 = LeakyRelu(%4, const(f32 : 0.3)): // f32[?,?,?,16]
  %6 = Transpose(%5, const(i32[4] : {0,3,1,2})): // f32[?,16,?,?]
  %7 = ShapeOf(%6): // i64[4]
  %8 = GetPaddings(%7, const(i64[4] : {16L,16L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %9 = Conv2D(PadMode.Constant, %6, const(f32[16,16,3,3]), const(f32[16]), const(i32[2] : {1,1}), %8, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,16,?,?]
  %10 = Transpose(%9, const(i32[4] : {0,2,3,1})): // f32[?,?,?,16]
  %11 = LeakyRelu(%10, const(f32 : 0.3)): // f32[?,?,?,16]
  %12 = Transpose(%11, const(i32[4] : {0,3,1,2})): // f32[?,16,?,?]
  %13 = ShapeOf(%12): // i64[4]
  %14 = Slice(%13, const(i32[1] : {2}), const(i32[1] : {3}), const(i32[1] : {0}), const(i32[1] : {1})): // i64[1]
  %15 = Reshape(%14, const(i32[0])): // i64
  %16 = Cast(DataTypes.Int32, CastMode.KDefault, %15): // i32
  %17 = Sub(BinaryOp.Sub, %16, const(i32 : 2)): // i32
  %18 = Add(BinaryOp.Add, %17, const(i32 : 2)): // i32
  %19 = Div(BinaryOp.Div, %18, const(i32 : 2)): // i32
  %20 = Sub(BinaryOp.Sub, %19, const(i32 : 1)): // i32
  %21 = Mul(BinaryOp.Mul, %20, const(i32 : 2)): // i32
  %22 = Add(BinaryOp.Add, %21, const(i32 : 2)): // i32
  %23 = Sub(BinaryOp.Sub, %22, %16): // i32
  %24 = Max(BinaryOp.Max, const(i32 : 0), %23): // i32
  %25 = Div(BinaryOp.Div, %24, const(i32 : 2)): // i32
  %26 = Div(BinaryOp.Div, %24, const(i32 : 2)): // i32
  %27 = Sub(BinaryOp.Sub, %24, %26): // i32
  %28 = (%25, %27): // (i32, i32)
  
  %29 = Stack(%28, const(i32 : 0)): // i32[2]
  %30 = ShapeOf(%12): // i64[4]
  %31 = Slice(%30, const(i32[1] : {3}), const(i32[1] : {4}), const(i32[1] : {0}), const(i32[1] : {1})): // i64[1]
  %32 = Reshape(%31, const(i32[0])): // i64
  %33 = Cast(DataTypes.Int32, CastMode.KDefault, %32): // i32
  %34 = Sub(BinaryOp.Sub, %33, const(i32 : 2)): // i32
  %35 = Add(BinaryOp.Add, %34, const(i32 : 2)): // i32
  %36 = Div(BinaryOp.Div, %35, const(i32 : 2)): // i32
  %37 = Sub(BinaryOp.Sub, %36, const(i32 : 1)): // i32
  %38 = Mul(BinaryOp.Mul, %37, const(i32 : 2)): // i32
  %39 = Add(BinaryOp.Add, %38, const(i32 : 2)): // i32
  %40 = Sub(BinaryOp.Sub, %39, %33): // i32
  %41 = Max(BinaryOp.Max, const(i32 : 0), %40): // i32
  %42 = Div(BinaryOp.Div, %41, const(i32 : 2)): // i32
  %43 = Div(BinaryOp.Div, %41, const(i32 : 2)): // i32
  %44 = Sub(BinaryOp.Sub, %41, %43): // i32
  %45 = (%42, %44): // (i32, i32)
  
  %46 = Stack(%45, const(i32 : 0)): // i32[2]
  %47 = (%29, %46): // (i32[2], i32[2])
  
  %48 = Stack(%47, const(i32 : 0)): // i32[2,2]
  %49 = ReduceWindow2D(ReduceOp.Max, %12, const(f32 : -3.4028235E+38), const(i32[2] : {2,2}), const(i32[2] : {2,2}), %48, const(i64[2] : {1L,1L}), const(bool : False), const(bool : False)): // f32[?,?,?,?]
  %50 = ShapeOf(%49): // i64[4]
  %51 = GetPaddings(%50, const(i64[4] : {32L,16L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %52 = Conv2D(PadMode.Constant, %49, const(f32[32,16,3,3]), const(f32[32]), const(i32[2] : {1,1}), %51, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,32,?,?]
  %53 = Transpose(%52, const(i32[4] : {0,2,3,1})): // f32[?,?,?,32]
  %54 = LeakyRelu(%53, const(f32 : 0.3)): // f32[?,?,?,32]
  %55 = Transpose(%54, const(i32[4] : {0,3,1,2})): // f32[?,32,?,?]
  %56 = ShapeOf(%55): // i64[4]
  %57 = GetPaddings(%56, const(i64[4] : {32L,32L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %58 = Conv2D(PadMode.Constant, %55, const(f32[32,32,3,3]), const(f32[32]), const(i32[2] : {1,1}), %57, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,32,?,?]
  %59 = Transpose(%58, const(i32[4] : {0,2,3,1})): // f32[?,?,?,32]
  %60 = LeakyRelu(%59, const(f32 : 0.3)): // f32[?,?,?,32]
  %61 = Transpose(%60, const(i32[4] : {0,3,1,2})): // f32[?,32,?,?]
  %62 = ShapeOf(%61): // i64[4]
  %63 = Slice(%62, const(i32[1] : {2}), const(i32[1] : {3}), const(i32[1] : {0}), const(i32[1] : {1})): // i64[1]
  %64 = Reshape(%63, const(i32[0])): // i64
  %65 = Cast(DataTypes.Int32, CastMode.KDefault, %64): // i32
  %66 = Sub(BinaryOp.Sub, %65, const(i32 : 2)): // i32
  %67 = Add(BinaryOp.Add, %66, const(i32 : 2)): // i32
  %68 = Div(BinaryOp.Div, %67, const(i32 : 2)): // i32
  %69 = Sub(BinaryOp.Sub, %68, const(i32 : 1)): // i32
  %70 = Mul(BinaryOp.Mul, %69, const(i32 : 2)): // i32
  %71 = Add(BinaryOp.Add, %70, const(i32 : 2)): // i32
  %72 = Sub(BinaryOp.Sub, %71, %65): // i32
  %73 = Max(BinaryOp.Max, const(i32 : 0), %72): // i32
  %74 = Div(BinaryOp.Div, %73, const(i32 : 2)): // i32
  %75 = Div(BinaryOp.Div, %73, const(i32 : 2)): // i32
  %76 = Sub(BinaryOp.Sub, %73, %75): // i32
  %77 = (%74, %76): // (i32, i32)
  
  %78 = Stack(%77, const(i32 : 0)): // i32[2]
  %79 = ShapeOf(%61): // i64[4]
  %80 = Slice(%79, const(i32[1] : {3}), const(i32[1] : {4}), const(i32[1] : {0}), const(i32[1] : {1})): // i64[1]
  %81 = Reshape(%80, const(i32[0])): // i64
  %82 = Cast(DataTypes.Int32, CastMode.KDefault, %81): // i32
  %83 = Sub(BinaryOp.Sub, %82, const(i32 : 2)): // i32
  %84 = Add(BinaryOp.Add, %83, const(i32 : 2)): // i32
  %85 = Div(BinaryOp.Div, %84, const(i32 : 2)): // i32
  %86 = Sub(BinaryOp.Sub, %85, const(i32 : 1)): // i32
  %87 = Mul(BinaryOp.Mul, %86, const(i32 : 2)): // i32
  %88 = Add(BinaryOp.Add, %87, const(i32 : 2)): // i32
  %89 = Sub(BinaryOp.Sub, %88, %82): // i32
  %90 = Max(BinaryOp.Max, const(i32 : 0), %89): // i32
  %91 = Div(BinaryOp.Div, %90, const(i32 : 2)): // i32
  %92 = Div(BinaryOp.Div, %90, const(i32 : 2)): // i32
  %93 = Sub(BinaryOp.Sub, %90, %92): // i32
  %94 = (%91, %93): // (i32, i32)
  
  %95 = Stack(%94, const(i32 : 0)): // i32[2]
  %96 = (%78, %95): // (i32[2], i32[2])
  
  %97 = Stack(%96, const(i32 : 0)): // i32[2,2]
  %98 = ReduceWindow2D(ReduceOp.Max, %61, const(f32 : -3.4028235E+38), const(i32[2] : {2,2}), const(i32[2] : {2,2}), %97, const(i64[2] : {1L,1L}), const(bool : False), const(bool : False)): // f32[?,?,?,?]
  %99 = ShapeOf(%98): // i64[4]
  %100 = GetPaddings(%99, const(i64[4] : {64L,32L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %101 = Conv2D(PadMode.Constant, %98, const(f32[64,32,3,3]), const(f32[64]), const(i32[2] : {1,1}), %100, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,64,?,?]
  %102 = Transpose(%101, const(i32[4] : {0,2,3,1})): // f32[?,?,?,64]
  %103 = LeakyRelu(%102, const(f32 : 0.3)): // f32[?,?,?,64]
  %104 = Transpose(%103, const(i32[4] : {0,3,1,2})): // f32[?,64,?,?]
  %105 = ShapeOf(%104): // i64[4]
  %106 = GetPaddings(%105, const(i64[4] : {64L,64L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %107 = Conv2D(PadMode.Constant, %104, const(f32[64,64,3,3]), const(f32[64]), const(i32[2] : {1,1}), %106, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,64,?,?]
  %108 = Transpose(%107, const(i32[4] : {0,2,3,1})): // f32[?,?,?,64]
  %109 = LeakyRelu(%108, const(f32 : 0.3)): // f32[?,?,?,64]
  %110 = Transpose(%109, const(i32[4] : {0,3,1,2})): // f32[?,64,?,?]
  %111 = ShapeOf(%110): // i64[4]
  %112 = Slice(%111, const(i32[1] : {2}), const(i32[1] : {3}), const(i32[1] : {0}), const(i32[1] : {1})): // i64[1]
  %113 = Reshape(%112, const(i32[0])): // i64
  %114 = Cast(DataTypes.Int32, CastMode.KDefault, %113): // i32
  %115 = Sub(BinaryOp.Sub, %114, const(i32 : 2)): // i32
  %116 = Add(BinaryOp.Add, %115, const(i32 : 2)): // i32
  %117 = Div(BinaryOp.Div, %116, const(i32 : 2)): // i32
  %118 = Sub(BinaryOp.Sub, %117, const(i32 : 1)): // i32
  %119 = Mul(BinaryOp.Mul, %118, const(i32 : 2)): // i32
  %120 = Add(BinaryOp.Add, %119, const(i32 : 2)): // i32
  %121 = Sub(BinaryOp.Sub, %120, %114): // i32
  %122 = Max(BinaryOp.Max, const(i32 : 0), %121): // i32
  %123 = Div(BinaryOp.Div, %122, const(i32 : 2)): // i32
  %124 = Div(BinaryOp.Div, %122, const(i32 : 2)): // i32
  %125 = Sub(BinaryOp.Sub, %122, %124): // i32
  %126 = (%123, %125): // (i32, i32)
  
  %127 = Stack(%126, const(i32 : 0)): // i32[2]
  %128 = ShapeOf(%110): // i64[4]
  %129 = Slice(%128, const(i32[1] : {3}), const(i32[1] : {4}), const(i32[1] : {0}), const(i32[1] : {1})): // i64[1]
  %130 = Reshape(%129, const(i32[0])): // i64
  %131 = Cast(DataTypes.Int32, CastMode.KDefault, %130): // i32
  %132 = Sub(BinaryOp.Sub, %131, const(i32 : 2)): // i32
  %133 = Add(BinaryOp.Add, %132, const(i32 : 2)): // i32
  %134 = Div(BinaryOp.Div, %133, const(i32 : 2)): // i32
  %135 = Sub(BinaryOp.Sub, %134, const(i32 : 1)): // i32
  %136 = Mul(BinaryOp.Mul, %135, const(i32 : 2)): // i32
  %137 = Add(BinaryOp.Add, %136, const(i32 : 2)): // i32
  %138 = Sub(BinaryOp.Sub, %137, %131): // i32
  %139 = Max(BinaryOp.Max, const(i32 : 0), %138): // i32
  %140 = Div(BinaryOp.Div, %139, const(i32 : 2)): // i32
  %141 = Div(BinaryOp.Div, %139, const(i32 : 2)): // i32
  %142 = Sub(BinaryOp.Sub, %139, %141): // i32
  %143 = (%140, %142): // (i32, i32)
  
  %144 = Stack(%143, const(i32 : 0)): // i32[2]
  %145 = (%127, %144): // (i32[2], i32[2])
  
  %146 = Stack(%145, const(i32 : 0)): // i32[2,2]
  %147 = ReduceWindow2D(ReduceOp.Max, %110, const(f32 : -3.4028235E+38), const(i32[2] : {2,2}), const(i32[2] : {2,2}), %146, const(i64[2] : {1L,1L}), const(bool : False), const(bool : False)): // f32[?,?,?,?]
  %148 = ShapeOf(%147): // i64[4]
  %149 = GetPaddings(%148, const(i64[4] : {128L,64L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %150 = Conv2D(PadMode.Constant, %147, const(f32[128,64,3,3]), const(f32[128]), const(i32[2] : {1,1}), %149, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,128,?,?]
  %151 = Transpose(%150, const(i32[4] : {0,2,3,1})): // f32[?,?,?,128]
  %152 = LeakyRelu(%151, const(f32 : 0.3)): // f32[?,?,?,128]
  %153 = Transpose(%152, const(i32[4] : {0,3,1,2})): // f32[?,128,?,?]
  %154 = ShapeOf(%153): // i64[4]
  %155 = GetPaddings(%154, const(i64[4] : {128L,128L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %156 = Conv2D(PadMode.Constant, %153, const(f32[128,128,3,3]), const(f32[128]), const(i32[2] : {1,1}), %155, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,128,?,?]
  %157 = Transpose(%156, const(i32[4] : {0,2,3,1})): // f32[?,?,?,128]
  %158 = LeakyRelu(%157, const(f32 : 0.3)): // f32[?,?,?,128]
  %159 = Transpose(%158, const(i32[4] : {0,3,1,2})): // f32[?,128,?,?]
  %160 = ShapeOf(%159): // i64[4]
  %161 = Slice(%160, const(i32[1] : {2}), const(i32[1] : {3}), const(i32[1] : {0}), const(i32[1] : {1})): // i64[1]
  %162 = Reshape(%161, const(i32[0])): // i64
  %163 = Cast(DataTypes.Int32, CastMode.KDefault, %162): // i32
  %164 = Sub(BinaryOp.Sub, %163, const(i32 : 2)): // i32
  %165 = Add(BinaryOp.Add, %164, const(i32 : 2)): // i32
  %166 = Div(BinaryOp.Div, %165, const(i32 : 2)): // i32
  %167 = Sub(BinaryOp.Sub, %166, const(i32 : 1)): // i32
  %168 = Mul(BinaryOp.Mul, %167, const(i32 : 2)): // i32
  %169 = Add(BinaryOp.Add, %168, const(i32 : 2)): // i32
  %170 = Sub(BinaryOp.Sub, %169, %163): // i32
  %171 = Max(BinaryOp.Max, const(i32 : 0), %170): // i32
  %172 = Div(BinaryOp.Div, %171, const(i32 : 2)): // i32
  %173 = Div(BinaryOp.Div, %171, const(i32 : 2)): // i32
  %174 = Sub(BinaryOp.Sub, %171, %173): // i32
  %175 = (%172, %174): // (i32, i32)
  
  %176 = Stack(%175, const(i32 : 0)): // i32[2]
  %177 = ShapeOf(%159): // i64[4]
  %178 = Slice(%177, const(i32[1] : {3}), const(i32[1] : {4}), const(i32[1] : {0}), const(i32[1] : {1})): // i64[1]
  %179 = Reshape(%178, const(i32[0])): // i64
  %180 = Cast(DataTypes.Int32, CastMode.KDefault, %179): // i32
  %181 = Sub(BinaryOp.Sub, %180, const(i32 : 2)): // i32
  %182 = Add(BinaryOp.Add, %181, const(i32 : 2)): // i32
  %183 = Div(BinaryOp.Div, %182, const(i32 : 2)): // i32
  %184 = Sub(BinaryOp.Sub, %183, const(i32 : 1)): // i32
  %185 = Mul(BinaryOp.Mul, %184, const(i32 : 2)): // i32
  %186 = Add(BinaryOp.Add, %185, const(i32 : 2)): // i32
  %187 = Sub(BinaryOp.Sub, %186, %180): // i32
  %188 = Max(BinaryOp.Max, const(i32 : 0), %187): // i32
  %189 = Div(BinaryOp.Div, %188, const(i32 : 2)): // i32
  %190 = Div(BinaryOp.Div, %188, const(i32 : 2)): // i32
  %191 = Sub(BinaryOp.Sub, %188, %190): // i32
  %192 = (%189, %191): // (i32, i32)
  
  %193 = Stack(%192, const(i32 : 0)): // i32[2]
  %194 = (%176, %193): // (i32[2], i32[2])
  
  %195 = Stack(%194, const(i32 : 0)): // i32[2,2]
  %196 = ReduceWindow2D(ReduceOp.Max, %159, const(f32 : -3.4028235E+38), const(i32[2] : {2,2}), const(i32[2] : {2,2}), %195, const(i64[2] : {1L,1L}), const(bool : False), const(bool : False)): // f32[?,?,?,?]
  %197 = ShapeOf(%196): // i64[4]
  %198 = GetPaddings(%197, const(i64[4] : {256L,128L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %199 = Conv2D(PadMode.Constant, %196, const(f32[256,128,3,3]), const(f32[256]), const(i32[2] : {1,1}), %198, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,256,?,?]
  %200 = Transpose(%199, const(i32[4] : {0,2,3,1})): // f32[?,?,?,256]
  %201 = LeakyRelu(%200, const(f32 : 0.3)): // f32[?,?,?,256]
  %202 = Transpose(%201, const(i32[4] : {0,3,1,2})): // f32[?,256,?,?]
  %203 = ShapeOf(%202): // i64[4]
  %204 = GetPaddings(%203, const(i64[4] : {256L,256L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %205 = Conv2D(PadMode.Constant, %202, const(f32[256,256,3,3]), const(f32[256]), const(i32[2] : {1,1}), %204, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,256,?,?]
  %206 = Transpose(%205, const(i32[4] : {0,2,3,1})): // f32[?,?,?,256]
  %207 = LeakyRelu(%206, const(f32 : 0.3)): // f32[?,?,?,256]
  %208 = Transpose(%207, const(i32[4] : {0,3,1,2})): // f32[?,256,?,?]
  %209 = ShapeOf(%208): // i64[4]
  %210 = Slice(%209, const(i32[1] : {0}), const(i32[1] : {1}), const(i32[1] : {0}), const(i32[1] : {1})): // i64[1]
  %211 = Reshape(%210, const(i32[0])): // i64
  %212 = ShapeOf(%208): // i64[4]
  %213 = Slice(%212, const(i32[1] : {1}), const(i32[1] : {2}), const(i32[1] : {0}), const(i32[1] : {1})): // i64[1]
  %214 = Reshape(%213, const(i32[0])): // i64
  %215 = (%211, %214): // (i64, i64)
  
  %216 = Stack(%215, const(i32 : 0)): // i64[2]
  %217 = (%216, const(i64[2] : {16L,16L})): // (i64[2], i64[2])
  
  %218 = Concat(%217, const(i32 : 0)): // i64[4]
  %219 = ResizeImage(ImageResizeMode.NearestNeighbor, ImageResizeTransformationMode.HalfPixel, ImageResizeNearestMode.RoundPreferCeil, True, %208, const(f32[0]), %218, const(f32 : -0.75), const(bool : False), const(f32 : -0)): // f32[?,256,?,?]
  %220 = ShapeOf(%219): // i64[4]
  %221 = GetPaddings(%220, const(i64[4] : {128L,256L,2L,2L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %222 = Conv2D(PadMode.Constant, %219, const(f32[128,256,2,2]), const(f32[128]), const(i32[2] : {1,1}), %221, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,128,?,?]
  %223 = Transpose(%222, const(i32[4] : {0,2,3,1})): // f32[?,?,?,128]
  %224 = LeakyRelu(%223, const(f32 : 0.3)): // f32[?,?,?,128]
  %225 = (%158, %224): // (f32[?,?,?,128], f32[?,?,?,128])
  
  %226 = Concat(%225, const(i32 : 3)): // f32[?,?,?,256]
  %227 = Transpose(%226, const(i32[4] : {0,3,1,2})): // f32[?,256,?,?]
  %228 = ShapeOf(%227): // i64[4]
  %229 = GetPaddings(%228, const(i64[4] : {128L,256L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %230 = Conv2D(PadMode.Constant, %227, const(f32[128,256,3,3]), const(f32[128]), const(i32[2] : {1,1}), %229, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,128,?,?]
  %231 = Transpose(%230, const(i32[4] : {0,2,3,1})): // f32[?,?,?,128]
  %232 = LeakyRelu(%231, const(f32 : 0.3)): // f32[?,?,?,128]
  %233 = Transpose(%232, const(i32[4] : {0,3,1,2})): // f32[?,128,?,?]
  %234 = ShapeOf(%233): // i64[4]
  %235 = GetPaddings(%234, const(i64[4] : {128L,128L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %236 = Conv2D(PadMode.Constant, %233, const(f32[128,128,3,3]), const(f32[128]), const(i32[2] : {1,1}), %235, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,128,?,?]
  %237 = Transpose(%236, const(i32[4] : {0,2,3,1})): // f32[?,?,?,128]
  %238 = LeakyRelu(%237, const(f32 : 0.3)): // f32[?,?,?,128]
  %239 = Transpose(%238, const(i32[4] : {0,3,1,2})): // f32[?,128,?,?]
  %240 = ShapeOf(%239): // i64[4]
  %241 = Slice(%240, const(i32[1] : {0}), const(i32[1] : {1}), const(i32[1] : {0}), const(i32[1] : {1})): // i64[1]
  %242 = Reshape(%241, const(i32[0])): // i64
  %243 = ShapeOf(%239): // i64[4]
  %244 = Slice(%243, const(i32[1] : {1}), const(i32[1] : {2}), const(i32[1] : {0}), const(i32[1] : {1})): // i64[1]
  %245 = Reshape(%244, const(i32[0])): // i64
  %246 = (%242, %245): // (i64, i64)
  
  %247 = Stack(%246, const(i32 : 0)): // i64[2]
  %248 = (%247, const(i64[2] : {32L,32L})): // (i64[2], i64[2])
  
  %249 = Concat(%248, const(i32 : 0)): // i64[4]
  %250 = ResizeImage(ImageResizeMode.NearestNeighbor, ImageResizeTransformationMode.HalfPixel, ImageResizeNearestMode.RoundPreferCeil, True, %239, const(f32[0]), %249, const(f32 : -0.75), const(bool : False), const(f32 : -0)): // f32[?,128,?,?]
  %251 = ShapeOf(%250): // i64[4]
  %252 = GetPaddings(%251, const(i64[4] : {64L,128L,2L,2L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %253 = Conv2D(PadMode.Constant, %250, const(f32[64,128,2,2]), const(f32[64]), const(i32[2] : {1,1}), %252, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,64,?,?]
  %254 = Transpose(%253, const(i32[4] : {0,2,3,1})): // f32[?,?,?,64]
  %255 = LeakyRelu(%254, const(f32 : 0.3)): // f32[?,?,?,64]
  %256 = (%109, %255): // (f32[?,?,?,64], f32[?,?,?,64])
  
  %257 = Concat(%256, const(i32 : 3)): // f32[?,?,?,128]
  %258 = Transpose(%257, const(i32[4] : {0,3,1,2})): // f32[?,128,?,?]
  %259 = ShapeOf(%258): // i64[4]
  %260 = GetPaddings(%259, const(i64[4] : {64L,128L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %261 = Conv2D(PadMode.Constant, %258, const(f32[64,128,3,3]), const(f32[64]), const(i32[2] : {1,1}), %260, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,64,?,?]
  %262 = Transpose(%261, const(i32[4] : {0,2,3,1})): // f32[?,?,?,64]
  %263 = LeakyRelu(%262, const(f32 : 0.3)): // f32[?,?,?,64]
  %264 = Transpose(%263, const(i32[4] : {0,3,1,2})): // f32[?,64,?,?]
  %265 = ShapeOf(%264): // i64[4]
  %266 = GetPaddings(%265, const(i64[4] : {64L,64L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %267 = Conv2D(PadMode.Constant, %264, const(f32[64,64,3,3]), const(f32[64]), const(i32[2] : {1,1}), %266, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,64,?,?]
  %268 = Transpose(%267, const(i32[4] : {0,2,3,1})): // f32[?,?,?,64]
  %269 = LeakyRelu(%268, const(f32 : 0.3)): // f32[?,?,?,64]
  %270 = Transpose(%269, const(i32[4] : {0,3,1,2})): // f32[?,64,?,?]
  %271 = ShapeOf(%270): // i64[4]
  %272 = Slice(%271, const(i32[1] : {0}), const(i32[1] : {1}), const(i32[1] : {0}), const(i32[1] : {1})): // i64[1]
  %273 = Reshape(%272, const(i32[0])): // i64
  %274 = ShapeOf(%270): // i64[4]
  %275 = Slice(%274, const(i32[1] : {1}), const(i32[1] : {2}), const(i32[1] : {0}), const(i32[1] : {1})): // i64[1]
  %276 = Reshape(%275, const(i32[0])): // i64
  %277 = (%273, %276): // (i64, i64)
  
  %278 = Stack(%277, const(i32 : 0)): // i64[2]
  %279 = (%278, const(i64[2] : {64L,64L})): // (i64[2], i64[2])
  
  %280 = Concat(%279, const(i32 : 0)): // i64[4]
  %281 = ResizeImage(ImageResizeMode.NearestNeighbor, ImageResizeTransformationMode.HalfPixel, ImageResizeNearestMode.RoundPreferCeil, True, %270, const(f32[0]), %280, const(f32 : -0.75), const(bool : False), const(f32 : -0)): // f32[?,64,?,?]
  %282 = ShapeOf(%281): // i64[4]
  %283 = GetPaddings(%282, const(i64[4] : {32L,64L,2L,2L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %284 = Conv2D(PadMode.Constant, %281, const(f32[32,64,2,2]), const(f32[32]), const(i32[2] : {1,1}), %283, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,32,?,?]
  %285 = Transpose(%284, const(i32[4] : {0,2,3,1})): // f32[?,?,?,32]
  %286 = LeakyRelu(%285, const(f32 : 0.3)): // f32[?,?,?,32]
  %287 = (%60, %286): // (f32[?,?,?,32], f32[?,?,?,32])
  
  %288 = Concat(%287, const(i32 : 3)): // f32[?,?,?,64]
  %289 = Transpose(%288, const(i32[4] : {0,3,1,2})): // f32[?,64,?,?]
  %290 = ShapeOf(%289): // i64[4]
  %291 = GetPaddings(%290, const(i64[4] : {32L,64L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %292 = Conv2D(PadMode.Constant, %289, const(f32[32,64,3,3]), const(f32[32]), const(i32[2] : {1,1}), %291, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,32,?,?]
  %293 = Transpose(%292, const(i32[4] : {0,2,3,1})): // f32[?,?,?,32]
  %294 = LeakyRelu(%293, const(f32 : 0.3)): // f32[?,?,?,32]
  %295 = Transpose(%294, const(i32[4] : {0,3,1,2})): // f32[?,32,?,?]
  %296 = ShapeOf(%295): // i64[4]
  %297 = GetPaddings(%296, const(i64[4] : {32L,32L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %298 = Conv2D(PadMode.Constant, %295, const(f32[32,32,3,3]), const(f32[32]), const(i32[2] : {1,1}), %297, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,32,?,?]
  %299 = Transpose(%298, const(i32[4] : {0,2,3,1})): // f32[?,?,?,32]
  %300 = LeakyRelu(%299, const(f32 : 0.3)): // f32[?,?,?,32]
  %301 = Transpose(%300, const(i32[4] : {0,3,1,2})): // f32[?,32,?,?]
  %302 = ShapeOf(%301): // i64[4]
  %303 = Slice(%302, const(i32[1] : {0}), const(i32[1] : {1}), const(i32[1] : {0}), const(i32[1] : {1})): // i64[1]
  %304 = Reshape(%303, const(i32[0])): // i64
  %305 = ShapeOf(%301): // i64[4]
  %306 = Slice(%305, const(i32[1] : {1}), const(i32[1] : {2}), const(i32[1] : {0}), const(i32[1] : {1})): // i64[1]
  %307 = Reshape(%306, const(i32[0])): // i64
  %308 = (%304, %307): // (i64, i64)
  
  %309 = Stack(%308, const(i32 : 0)): // i64[2]
  %310 = (%309, const(i64[2] : {128L,128L})): // (i64[2], i64[2])
  
  %311 = Concat(%310, const(i32 : 0)): // i64[4]
  %312 = ResizeImage(ImageResizeMode.NearestNeighbor, ImageResizeTransformationMode.HalfPixel, ImageResizeNearestMode.RoundPreferCeil, True, %301, const(f32[0]), %311, const(f32 : -0.75), const(bool : False), const(f32 : -0)): // f32[?,32,?,?]
  %313 = ShapeOf(%312): // i64[4]
  %314 = GetPaddings(%313, const(i64[4] : {16L,32L,2L,2L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %315 = Conv2D(PadMode.Constant, %312, const(f32[16,32,2,2]), const(f32[16]), const(i32[2] : {1,1}), %314, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,16,?,?]
  %316 = Transpose(%315, const(i32[4] : {0,2,3,1})): // f32[?,?,?,16]
  %317 = LeakyRelu(%316, const(f32 : 0.3)): // f32[?,?,?,16]
  %318 = (%11, %317): // (f32[?,?,?,16], f32[?,?,?,16])
  
  %319 = Concat(%318, const(i32 : 3)): // f32[?,?,?,32]
  %320 = Transpose(%319, const(i32[4] : {0,3,1,2})): // f32[?,32,?,?]
  %321 = ShapeOf(%320): // i64[4]
  %322 = GetPaddings(%321, const(i64[4] : {16L,32L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %323 = Conv2D(PadMode.Constant, %320, const(f32[16,32,3,3]), const(f32[16]), const(i32[2] : {1,1}), %322, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,16,?,?]
  %324 = Transpose(%323, const(i32[4] : {0,2,3,1})): // f32[?,?,?,16]
  %325 = LeakyRelu(%324, const(f32 : 0.3)): // f32[?,?,?,16]
  %326 = Transpose(%325, const(i32[4] : {0,3,1,2})): // f32[?,16,?,?]
  %327 = ShapeOf(%326): // i64[4]
  %328 = GetPaddings(%327, const(i64[4] : {16L,16L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %329 = Conv2D(PadMode.Constant, %326, const(f32[16,16,3,3]), const(f32[16]), const(i32[2] : {1,1}), %328, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,16,?,?]
  %330 = Transpose(%329, const(i32[4] : {0,2,3,1})): // f32[?,?,?,16]
  %331 = LeakyRelu(%330, const(f32 : 0.3)): // f32[?,?,?,16]
  %332 = Transpose(%331, const(i32[4] : {0,3,1,2})): // f32[?,16,?,?]
  %333 = ShapeOf(%332): // i64[4]
  %334 = GetPaddings(%333, const(i64[4] : {2L,16L,3L,3L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : True), const(bool : False)): // i64[2,2]
  %335 = Conv2D(PadMode.Constant, %332, const(f32[2,16,3,3]), const(f32[2] : {0f,0f}), const(i32[2] : {1,1}), %334, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,2,?,?]
  %336 = Transpose(%335, const(i32[4] : {0,2,3,1})): // f32[?,?,?,2]
  %337 = LeakyRelu(%336, const(f32 : 0.3)): // f32[?,?,?,2]
  %338 = Transpose(%337, const(i32[4] : {0,3,1,2})): // f32[?,2,?,?]
  %339 = ShapeOf(%338): // i64[4]
  %340 = GetPaddings(%339, const(i64[4] : {1L,2L,1L,1L}), const(i32[2] : {1,1}), const(i32[2] : {1,1}), const(bool : False), const(bool : False)): // i64[2,2]
  %341 = Conv2D(PadMode.Constant, %338, const(f32[1,2,1,1] : {{{{-0.18535042f}},{{-1.2832744f}}}}), const(f32[1] : {0f}), const(i32[2] : {1,1}), %340, const(i32[2] : {1,1}), const(i32 : 1), const(f32[2] : {-∞f,∞f})): // f32[?,1,?,?]
  %342 = Transpose(%341, const(i32[4] : {0,2,3,1})): // f32[?,?,?,1]
  %343 = Tanh(UnaryOp.Tanh, %342): // f32[?,?,?,1]
}
